{"version":3,"sources":["webpack:///../src/pages/translator.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-translator-mdx-7ee114bdc610635b9454.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/mkt/Development/corets/corets/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"translator\"\n    }}>{`Translator`}</h1>\n    <p>{`Simple translation library that works everywhere.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn add @corets/translator\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"react\"\n    }}>{`React`}</h2>\n    <p>{`Before you can start using this library inside React, you have to add the `}<a parentName=\"p\" {...{\n        \"href\": \"/use-translator\"\n      }}>{`@corets/use-translator`}</a>{` package first. It provides a seamless integration through a hooks based API.`}</p>\n    <h2 {...{\n      \"id\": \"custom-interpolations\"\n    }}>{`Custom interpolations`}</h2>\n    <p>{`Provide a custom interpolation function, that is replacing placeholders with replacements:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { createTranslator } from \"@corets/translator\"\n\nconst customInterpolator = (text: string, match: string, replacement: any) => {\n  return text.replace(\\`{ \\${match} }\\`, replacement)\n}\n\nconst translator = createTranslator({}, { interpolator: customInterpolator })\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"custom-formatting\"\n    }}>{`Custom formatting`}</h2>\n    <p>{`Provide a custom formatter function, that formats replacements:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { createTranslator, formatter } from \"@corets/translator\"\nimport dayjs from \"dayjs\"\n\nconst customFormatter = (language: string, replacement: any, replacements: object) => {\n  // custom formatting for dates\n  if (replacement instanceof Date) {\n    const format = replacements?.format ?? \"DD.MM.YYYY\"\n\n    return dayjs(replacement).format(format)\n  }\n\n  // fallback to default behaviour\n  return formatter(language, replacement, replacements)\n}\n\nconst translator = createTranslator({}, { formatter: customFormatter })\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"custom-placeholder-for-missing-keys\"\n    }}>{`Custom placeholder for missing keys`}</h2>\n    <p>{`Provide a custom placeholder for missing translation keys:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { createTranslator } from \"@corets/translator\"\n\nconst customPlaceholder = (language: string, key: string, replacements: object) => \\`\\${language}.\\${key}\\`\n\nconst translator = createTranslator({}, { placeholder: customPlaceholder })\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"createtranslator\"\n    }}><inlineCode parentName=\"h2\">{`createTranslator`}</inlineCode></h2>\n    <p>{`Creates a new instance of `}<inlineCode parentName=\"p\">{`Translator`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { createTranslator } from \"@corets/translator\"\n\nconst translations = {\n  en: { title: \"Welcome\" },\n  de: { title: \"Willkommen\" }\n}\n\nconst translator = createTranslator(translations, { language: \"en\" })\n`}</code></pre>\n    <p>{`Create a translator instance without the factory function:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { Translator } from \"@corets/translator\"\n\nconst translator = new Translator({}, { language: \"en\" })\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"translatorconfig\"\n    }}><inlineCode parentName=\"h2\">{`Translator.config`}</inlineCode></h2>\n    <p>{`Configure translator:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { createTranslator } from \"@corets/translator\"\n\nconst translator = createTranslator({}, { language: \"en\" })\n\ntranslator.config({\n  // current language\n  language: \"en\",\n  // fallback to another language if the translation key is missing\n  fallbackLanguage: \"de\",\n  // should translations be templatized? (default: true)\n  templatize: true,\n  // custom replacements formatter\n  formatter,\n  // custom message interpolator\n  interpolator,\n  // custom formatter for missing translation keys\n  placeholder,\n})\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"translatorgetlanguage\"\n    }}><inlineCode parentName=\"h2\">{`Translator.getLanguage`}</inlineCode></h2>\n    <p>{`Get current language:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`translator.getLanguage()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"translatorsetlanguage\"\n    }}><inlineCode parentName=\"h2\">{`Translator.setLanguage`}</inlineCode></h2>\n    <p>{`Change current language:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`translator.setLanguage(\"en\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"translatorgetlanguages\"\n    }}><inlineCode parentName=\"h2\">{`Translator.getLanguages`}</inlineCode></h2>\n    <p>{`Get all registered languages:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`translator.getLanguages()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"translatorgetfallbacklanguage\"\n    }}><inlineCode parentName=\"h2\">{`Translator.getFallbackLanguage`}</inlineCode></h2>\n    <p>{`Get fallback language:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`transaltor.getFallbackLanguage()\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Note:`}</strong>{` A fallback language is used whenever a translation key is missing from the current language.`}</p>\n    <h2 {...{\n      \"id\": \"translatorsetfallbacklanguage\"\n    }}><inlineCode parentName=\"h2\">{`Translator.setFallbackLanguage`}</inlineCode></h2>\n    <p>{`Change fallback language:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`translator.setFallbackLanguage(\"de\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"translatorgettranslations\"\n    }}><inlineCode parentName=\"h2\">{`Translator.getTranslations`}</inlineCode></h2>\n    <p>{`Get all registered translations:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`translator.getTranslations()\n`}</code></pre>\n    <p>{`The returned object looks something like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`{\n  en: { key: \"value\" },\n  de: { key: \"value\" },\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"translatorgettranslationsforlanguage\"\n    }}><inlineCode parentName=\"h2\">{`Translator.getTranslationsForLanguage`}</inlineCode></h2>\n    <p>{`Get all translations for a specific langauge:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`translator.getTranslationsForLanguage(\"en\")\n`}</code></pre>\n    <p>{`The returned object looks something like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`{\n  key: \"value\"\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"translatorsettranslations\"\n    }}><inlineCode parentName=\"h2\">{`Translator.setTranslations`}</inlineCode></h2>\n    <p>{`Replace all translations, for all languages, with new ones:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`translator.setTranslations({ en: { key: \"value\" }})\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"translatorsettranslationsforlanguage\"\n    }}><inlineCode parentName=\"h2\">{`Translator.setTranslationsForLanguage`}</inlineCode></h2>\n    <p>{`Replace all translations for a specific language:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`translator.setTranslationsForLanguage(\"en\", { key: \"value\" })\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"translatoraddtranslations\"\n    }}><inlineCode parentName=\"h2\">{`Translator.addTranslations`}</inlineCode></h2>\n    <p>{`Add translations, for all languages, using a merge:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`translator.addTranslations({ de: { key: \"value\" } })\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Note:`}</strong>{` Contrary to the `}<a parentName=\"p\" {...{\n        \"href\": \"#translatorsettranslations\"\n      }}><inlineCode parentName=\"a\">{`Translator.setTranslations()`}</inlineCode></a>{` method, this one will not replace all translations but do a merge instead.`}</p>\n    <h2 {...{\n      \"id\": \"translatoraddtranslationsforlanguage\"\n    }}><inlineCode parentName=\"h2\">{`Translator.addTranslationsForLanguage`}</inlineCode></h2>\n    <p>{`Add translations, for a specific language, using a merge:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`translator.addTranslationsForLanguage(\"en\", { key: \"value\" })\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Note:`}</strong>{` Contrary to the `}<a parentName=\"p\" {...{\n        \"href\": \"#translatorsettranslationsforlanguage\"\n      }}><inlineCode parentName=\"a\">{`Translator.setTranslationsForLanguage()`}</inlineCode></a>{` method, this one will not replace all translations but do a merge instead.`}</p>\n    <h2 {...{\n      \"id\": \"translatorget\"\n    }}><inlineCode parentName=\"h2\">{`Translator.get`}</inlineCode></h2>\n    <p>{`Retrieve a translation:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`translator.get(\"key\")\n`}</code></pre>\n    <p>{`Retrieve a translation with a nested key:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`translator.get(\"nested.key\")\n`}</code></pre>\n    <p>{`Retrieve translation for another language:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`translator.get(\"key\", { language: \"de\" })\n`}</code></pre>\n    <p>{`Retrieve translation with another fallback language:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`translator.get(\"key\", { fallbackLanguage: \"de\" })\n`}</code></pre>\n    <p>{`Retrieve translation without templatizing it:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`translator.get(\"key\", { templatize: false })\n`}</code></pre>\n    <p>{`Retrieve a translation and interpolate some values, using array syntax:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`// given translation at \"key\" is \"Did you know, $1 and $2 are colors?\"\ntranslator.get(\"key\", [\"red\", \"blue\"])\n// you'll get \"Did you know, red and blue are colors?\"\n`}</code></pre>\n    <p>{`Retrieve a translation and interpolate some values, using object syntax:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`// given translation at \"key\" is \"Did you know, $color1 and $color2 are colors?\"\ntranslator.get(\"key\", { color1: \"red\", color2: \"blue\" })\n// you'll get \"Did you know, red and blue are colors?\"\n`}</code></pre>\n    <p>{`Retrieve translation with a custom formatter, interpolator and placeholder:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`translator.get(\"key\", { formatter, interpolator, placeholder })\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Note:`}</strong>{` Read more about `}<a parentName=\"p\" {...{\n        \"href\": \"#custom-formatting\"\n      }}>{`formatter`}</a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"#custom-interpolations\"\n      }}>{`interpolator`}</a>{`, and `}<a parentName=\"p\" {...{\n        \"href\": \"#custom-placeholder-for-missing-keys\"\n      }}>{`placeholder`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"translatorhas\"\n    }}><inlineCode parentName=\"h2\">{`Translator.has`}</inlineCode></h2>\n    <p>{`Check if translation exists:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`translator.has(\"key\")\n`}</code></pre>\n    <p>{`Check if translation exists for a specific language:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`translator.has(\"key\", { language: \"en\" })\n`}</code></pre>\n    <p>{`Check if translation exists in the current langauge or in a specific fallback language:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`translator.has(\"key\", { fallbackLanguage: \"de\" })\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"translatort\"\n    }}><inlineCode parentName=\"h2\">{`Translator.t`}</inlineCode></h2>\n    <p>{`Create a dedicated translation function:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const t = translator.t()\n\nt(\"key\")\n`}</code></pre>\n    <p>{`Create a translation function for a specific scope:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const t = translator.t(\"nested.key\")\n\n// the actual path will be \"nested.key.key\"\nt(\"key\")\n`}</code></pre>\n    <p>{`Override scope with `}<inlineCode parentName=\"p\">{`~`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const t = translator.t(\"nested.key\")\n\n// the actual path will be \"key\"\nt(\"~key\")\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Note:`}</strong>{` Method `}<inlineCode parentName=\"p\">{`Translator.t`}</inlineCode>{` as well as the translate function accept the same options as the `}<a parentName=\"p\" {...{\n        \"href\": \"#translatorget\"\n      }}><inlineCode parentName=\"a\">{`Translator.get()`}</inlineCode></a>{` method.`}</p>\n    <h2 {...{\n      \"id\": \"translatorlisten\"\n    }}><inlineCode parentName=\"h2\">{`Translator.listen`}</inlineCode></h2>\n    <p>{`Listen to any kind of changes (like language change, translations change, etc.):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const unsubscribe = translator.listen((translator) => console.log(\"something changed\"))\n\n// unsubscribe from changes\nunsubscribe()\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}