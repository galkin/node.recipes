(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{Ca1S:function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return b})),a.d(t,"default",(function(){return o}));var n=a("Fcif"),l=a("+I+c"),s=(a("mXGw"),a("/FXl")),c=a("BIGe"),b=(a("aD51"),{});void 0!==b&&b&&b===Object(b)&&Object.isExtensible(b)&&!b.hasOwnProperty("__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/pages/list.mdx"}});var i={_frontmatter:b},r=c.a;function o(e){var t=e.components,a=Object(l.a)(e,["components"]);return Object(s.b)(r,Object(n.a)({},i,a,{components:t,mdxType:"MDXLayout"}),Object(s.b)("h1",{id:"list"},"List"),Object(s.b)("p",null,"Simple observable list that can also be used inside React using Hooks. This observable is accompanied by ",Object(s.b)("a",Object(n.a)({parentName:"p"},{href:"/value"}),"@corets/value")," and ",Object(s.b)("a",Object(n.a)({parentName:"p"},{href:"/store"}),"@corets/store"),"."),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"yarn add @corets/list\n")),Object(s.b)("h2",{id:"react"},"React"),Object(s.b)("p",null,"You can use lists inside React using this hooks based integration ",Object(s.b)("a",Object(n.a)({parentName:"p"},{href:"/use-list"}),"@corets/use-list"),"."),Object(s.b)("h2",{id:"localstorage"},"LocalStorage"),Object(s.b)("p",null,"There is also a version of this library that syncs its state to the localStorage: ",Object(s.b)("a",Object(n.a)({parentName:"p"},{href:"/local-storage-list"}),"@corets/local-storage-list")),Object(s.b)("h2",{id:"createlist"},Object(s.b)("inlineCode",{parentName:"h2"},"createList")),Object(s.b)("p",null,"Creates a new instance of ",Object(s.b)("inlineCode",{parentName:"p"},"List"),":"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),'import { createList } from "@corets/list"\n\nconst list = createList(["some", "data"])\n')),Object(s.b)("p",null,"Create a new instance without the factory function:"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),'import { List } from "@corets/list"\n\nconst list = new List(["some", "data"])\n')),Object(s.b)("p",null,"Create a new instance with a custom differ:"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),'import { createList } from "@corets/list"\n\nconst differ = (oldValue, newValue) => true\nconst list = createList(["some", "data"], { differ })\n')),Object(s.b)("h2",{id:"listget"},Object(s.b)("inlineCode",{parentName:"h2"},"List.get")),Object(s.b)("p",null,"Retrieve all values from the list:"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"list.get()\n")),Object(s.b)("h2",{id:"listgetat"},Object(s.b)("inlineCode",{parentName:"h2"},"List.getAt")),Object(s.b)("p",null,"Retrieve a value at a specific index:"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"list.getAt(0)\n")),Object(s.b)("h2",{id:"listset"},Object(s.b)("inlineCode",{parentName:"h2"},"List.set")),Object(s.b)("p",null,"Replace all values in the list:"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),'list.set(["mango", "potato"])\n')),Object(s.b)("h2",{id:"listadd"},Object(s.b)("inlineCode",{parentName:"h2"},"List.add")),Object(s.b)("p",null,"Add some data values without replacing the previous ones:"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),'list.add("oranges", "beans")\n')),Object(s.b)("h2",{id:"listaddat"},Object(s.b)("inlineCode",{parentName:"h2"},"List.addAt")),Object(s.b)("p",null,"Add value at a specific index:"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),'list.addAt(1, "chili")\n')),Object(s.b)("h2",{id:"listhas"},Object(s.b)("inlineCode",{parentName:"h2"},"List.has")),Object(s.b)("p",null,"Check if a specific value is in the list:"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),'list.has("oranges")\n')),Object(s.b)("h2",{id:"listhasat"},Object(s.b)("inlineCode",{parentName:"h2"},"List.hasAt")),Object(s.b)("p",null,"Check if there is a value at the specific index:"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"list.hasAt(1)\n")),Object(s.b)("h2",{id:"listremove"},Object(s.b)("inlineCode",{parentName:"h2"},"List.remove")),Object(s.b)("p",null,"Remove a value from the list:"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),'list.remove("beans")\n')),Object(s.b)("h2",{id:"listremoveat"},Object(s.b)("inlineCode",{parentName:"h2"},"List.removeAt")),Object(s.b)("p",null,"Remove value at the specific index:"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"list.removeAt(1)\n")),Object(s.b)("h2",{id:"listindexof"},Object(s.b)("inlineCode",{parentName:"h2"},"List.indexOf")),Object(s.b)("p",null,"Get index of a specific value:"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),'list.indexOf("oranges")\n')),Object(s.b)("h2",{id:"listfilter"},Object(s.b)("inlineCode",{parentName:"h2"},"List.filter")),Object(s.b)("p",null,"Filter values in the list:"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"list.filter((value, index) => true)\n")),Object(s.b)("h2",{id:"listmap"},Object(s.b)("inlineCode",{parentName:"h2"},"List.map")),Object(s.b)("p",null,"Map values in the list:"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"list.map((value, index) => newValue)\n")),Object(s.b)("h2",{id:"listforeach"},Object(s.b)("inlineCode",{parentName:"h2"},"List.forEach")),Object(s.b)("p",null,"Iterate over values in the list:"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"list.forEach((value, index) => {})\n")),Object(s.b)("h2",{id:"listlisten"},Object(s.b)("inlineCode",{parentName:"h2"},"List.listen")),Object(s.b)("p",null,"Listen to any changes:"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"list.listen(state => console.log(state))\n")),Object(s.b)("p",null,"Invoke listener immediately:"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"list.listen(state => console.log(state), { immediate: true })\n")),Object(s.b)("p",null,"Listen with a custom differ:"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"const differ = (oldValue, newValue) => true\n\nlist.listen(state => console.log(state), { differ })\n")),Object(s.b)("h2",{id:"listuse"},Object(s.b)("inlineCode",{parentName:"h2"},"List.use")),Object(s.b)("p",null,"Returns value, and a setter function to update the list. This is a convenience method for people used to React's ",Object(s.b)("inlineCode",{parentName:"p"},"useState")," syntax."),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),'import { createList } from "@corets/list"\n\nconst [list, setList] = createList([1, 2]).use()\n')))}void 0!==o&&o&&o===Object(o)&&Object.isExtensible(o)&&!o.hasOwnProperty("__filemeta")&&Object.defineProperty(o,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/pages/list.mdx"}}),o.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-list-mdx-80f138abf27cd9075c66.js.map