(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{a8ii:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return i})),n.d(t,"default",(function(){return b}));var a=n("Fcif"),r=n("+I+c"),o=(n("mXGw"),n("/FXl")),u=n("BIGe"),i=(n("aD51"),{});void 0!==i&&i&&i===Object(i)&&Object.isExtensible(i)&&!i.hasOwnProperty("__filemeta")&&Object.defineProperty(i,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/pages/use-query.mdx"}});var s={_frontmatter:i},c=u.a;function b(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)(c,Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"use-query"},"Use Query"),Object(o.b)("p",null,"Convenient hooks for url query segments, built for ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://reactrouter.com/web/guides/quick-start"}),Object(o.b)("inlineCode",{parentName:"a"},"react-router")),". Working with queries is now as easy as using ",Object(o.b)("inlineCode",{parentName:"p"},"useState"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"yarn add @corets/use-query\n")),Object(o.b)("h2",{id:"usequery"},Object(o.b)("inlineCode",{parentName:"h2"},"useQuery")),Object(o.b)("p",null,"Hook into URL query and update it easily from withing your component:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'import React from "react"\nimport { useQuery } from "@corets/use-query"\n\nconst Example = () => {\n  const [query, setQuery, patchQuery] = useQuery({\n    page: 1,\n    order: "asc"\n  })\n\n  // update page and also reset order to the initial value "asc"\n  const handleGoToNextPage = () => setQuery({ page: query.page + 1 })\n  // update order, but keep page as is\n  const handleToggleSort = () => patchQuery({ order: query.order === "asc" ? "desc" : "asc" })\n\n  return (\n    <div>\n      <div>Page: {query.page}</div>\n      <div>Order: {query.order}</div>\n      <button onClick={handleGoToNextPage}>Go to next page</button>\n      <button onClick={handleToggleSort}>Change sorting order</button>\n    </div>\n  )\n}\n')),Object(o.b)("p",null,"By default, parameters like ",Object(o.b)("inlineCode",{parentName:"p"},'""'),", ",Object(o.b)("inlineCode",{parentName:"p"},"null"),", ",Object(o.b)("inlineCode",{parentName:"p"},"undefined"),", ",Object(o.b)("inlineCode",{parentName:"p"},"0")," and ",Object(o.b)("inlineCode",{parentName:"p"},'"0"')," are stripped, the default value will be used instead. Updating query with one of those values won't change anything. You can alter this behaviour by providing a second argument, overriding values that should be stripped away:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),'useQuery({ some: "value" }, ["", null, undefined])\n')))}void 0!==b&&b&&b===Object(b)&&Object.isExtensible(b)&&!b.hasOwnProperty("__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/pages/use-query.mdx"}}),b.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-use-query-mdx-dd8f4faf46a3f20e3d9f.js.map