{"version":3,"sources":["webpack:///../src/pages/list.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-list-mdx-80f138abf27cd9075c66.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/mkt/Development/corets/corets/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"list\"\n    }}>{`List`}</h1>\n    <p>{`Simple observable list that can also be used inside React using Hooks. This observable is accompanied by `}<a parentName=\"p\" {...{\n        \"href\": \"/value\"\n      }}>{`@corets/value`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"/store\"\n      }}>{`@corets/store`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn add @corets/list\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"react\"\n    }}>{`React`}</h2>\n    <p>{`You can use lists inside React using this hooks based integration `}<a parentName=\"p\" {...{\n        \"href\": \"/use-list\"\n      }}>{`@corets/use-list`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"localstorage\"\n    }}>{`LocalStorage`}</h2>\n    <p>{`There is also a version of this library that syncs its state to the localStorage: `}<a parentName=\"p\" {...{\n        \"href\": \"/local-storage-list\"\n      }}>{`@corets/local-storage-list`}</a></p>\n    <h2 {...{\n      \"id\": \"createlist\"\n    }}><inlineCode parentName=\"h2\">{`createList`}</inlineCode></h2>\n    <p>{`Creates a new instance of `}<inlineCode parentName=\"p\">{`List`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { createList } from \"@corets/list\"\n\nconst list = createList([\"some\", \"data\"])\n`}</code></pre>\n    <p>{`Create a new instance without the factory function:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { List } from \"@corets/list\"\n\nconst list = new List([\"some\", \"data\"])\n`}</code></pre>\n    <p>{`Create a new instance with a custom differ:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { createList } from \"@corets/list\"\n\nconst differ = (oldValue, newValue) => true\nconst list = createList([\"some\", \"data\"], { differ })\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"listget\"\n    }}><inlineCode parentName=\"h2\">{`List.get`}</inlineCode></h2>\n    <p>{`Retrieve all values from the list:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`list.get()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"listgetat\"\n    }}><inlineCode parentName=\"h2\">{`List.getAt`}</inlineCode></h2>\n    <p>{`Retrieve a value at a specific index:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`list.getAt(0)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"listset\"\n    }}><inlineCode parentName=\"h2\">{`List.set`}</inlineCode></h2>\n    <p>{`Replace all values in the list:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`list.set([\"mango\", \"potato\"])\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"listadd\"\n    }}><inlineCode parentName=\"h2\">{`List.add`}</inlineCode></h2>\n    <p>{`Add some data values without replacing the previous ones:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`list.add(\"oranges\", \"beans\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"listaddat\"\n    }}><inlineCode parentName=\"h2\">{`List.addAt`}</inlineCode></h2>\n    <p>{`Add value at a specific index:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`list.addAt(1, \"chili\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"listhas\"\n    }}><inlineCode parentName=\"h2\">{`List.has`}</inlineCode></h2>\n    <p>{`Check if a specific value is in the list:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`list.has(\"oranges\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"listhasat\"\n    }}><inlineCode parentName=\"h2\">{`List.hasAt`}</inlineCode></h2>\n    <p>{`Check if there is a value at the specific index:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`list.hasAt(1)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"listremove\"\n    }}><inlineCode parentName=\"h2\">{`List.remove`}</inlineCode></h2>\n    <p>{`Remove a value from the list:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`list.remove(\"beans\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"listremoveat\"\n    }}><inlineCode parentName=\"h2\">{`List.removeAt`}</inlineCode></h2>\n    <p>{`Remove value at the specific index:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`list.removeAt(1)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"listindexof\"\n    }}><inlineCode parentName=\"h2\">{`List.indexOf`}</inlineCode></h2>\n    <p>{`Get index of a specific value:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`list.indexOf(\"oranges\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"listfilter\"\n    }}><inlineCode parentName=\"h2\">{`List.filter`}</inlineCode></h2>\n    <p>{`Filter values in the list:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`list.filter((value, index) => true)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"listmap\"\n    }}><inlineCode parentName=\"h2\">{`List.map`}</inlineCode></h2>\n    <p>{`Map values in the list:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`list.map((value, index) => newValue)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"listforeach\"\n    }}><inlineCode parentName=\"h2\">{`List.forEach`}</inlineCode></h2>\n    <p>{`Iterate over values in the list:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`list.forEach((value, index) => {})\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"listlisten\"\n    }}><inlineCode parentName=\"h2\">{`List.listen`}</inlineCode></h2>\n    <p>{`Listen to any changes:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`list.listen(state => console.log(state))\n`}</code></pre>\n    <p>{`Invoke listener immediately:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`list.listen(state => console.log(state), { immediate: true })\n`}</code></pre>\n    <p>{`Listen with a custom differ:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const differ = (oldValue, newValue) => true\n\nlist.listen(state => console.log(state), { differ })\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"listuse\"\n    }}><inlineCode parentName=\"h2\">{`List.use`}</inlineCode></h2>\n    <p>{`Returns value, and a setter function to update the list. This is a convenience method for people used to React's `}<inlineCode parentName=\"p\">{`useState`}</inlineCode>{` syntax.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { createList } from \"@corets/list\"\n\nconst [list, setList] = createList([1, 2]).use()\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}