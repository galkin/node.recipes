{"version":3,"sources":["webpack:///../src/pages/pagination-helpers.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","repository","parentName","isMDXComponent"],"mappings":"oQASaA,G,UAAe,S,kNAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,YAAC,IAAD,CAAQC,WAAW,qBAAqBD,QAAQ,WAChD,iBAAQ,CACN,GAAM,sBADR,sBAGA,sFACA,uBAAK,gCAAME,WAAW,OAAU,CAC5B,UAAa,kBADZ,0CAIL,iBAAQ,CACN,GAAM,oBACL,0BAAYA,WAAW,MAAvB,qBACH,mHACA,kFACA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,6HAML,8CACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,qbAeL,kIACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,8xC,gNA8CTL,EAAWM,gBAAiB","file":"component---src-pages-pagination-helpers-mdx-4aa1ab3e3686005f9eb6.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/mkt/Development/corets/corets/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Header } from \"../shared/Header\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Header repository=\"pagination-helpers\" mdxType=\"Header\" />\n    <h1 {...{\n      \"id\": \"pagination-helpers\"\n    }}>{`Pagination Helpers`}</h1>\n    <p>{`Various helpers related to pagination specific functionality.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn add @corets/pagination-helpers\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"createpagination\"\n    }}><inlineCode parentName=\"h2\">{`createPagination`}</inlineCode></h2>\n    <p>{`Calculates total amount of pages, visible pages, more / less indicators, total items, etc.`}</p>\n    <p>{`This helper can be used to build a pagination like these:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`< << ... 6 7 8 [9] 10 11 12 ... >> >\n< << 7 8 [9] 10 11 >> >\n<  ... 7 8 [9] 10 11  ... >\n< [9] >\n[ v Select page ]\n`}</code></pre>\n    <p>{`Calculate pagination:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { createPagination } from \"@corets/pagination-helpers\"\n\n// active page\nconst currentPage = 7\n// total number of items for pagination\nconst totalItems = 1337\n// how many items are visible on a single page\nconst pageSize = 20\n// how many pages you want to display to the left and right of the current page\nconst surroundBy = 2\n\nconst pagination = createPagination({ currentPage, totalItems, pageSize, surroundBy })\n`}</code></pre>\n    <p>{`With the calculated result below you can build almost every possible kind of pagination you can think of:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`{\n  // active page\n  currentPage: 7,\n  // number of the first page, obviously...\n  firstPage: 1,\n  // number of the last page\n  lastPage: 67,\n  // first visible page based on the surroundBy\n  firstVisiblePage: 5,\n  // last visible page based on the surroundBy\n  lastVisiblePage: 9,\n  // all visible pages based on the surroundBy\n  visiblePages: [ 5, 6, 7, 8, 9 ],\n  // all available pages, useful for a dropdown\n  allPages: [\n     1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12,\n    13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n    25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,\n    37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,\n    49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n    61, 62, 63, 64, 65, 66, 67\n  ],\n  // are there any previous pages?\n  hasPrevious: true,\n  // are there any next pages?\n  hasNext: true,\n  // are there any pages in between the first page and the first visible page?\n  hasLess: true,\n  // are there any pages in between the last page and the last visible page?\n  hasMore: true,\n  // how many items to skip, useful for an api call\n  itemsOffset: 120,\n  // how many items are visible per page\n  pageSize: 20,\n  // is current page the first one?\n  isFirstPage: false,\n  // is current page the last one?\n  isLastPage: false\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}