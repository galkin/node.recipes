(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{"F/iu":function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return c})),t.d(n,"default",(function(){return i}));var o=t("Fcif"),a=t("+I+c"),s=(t("mXGw"),t("/FXl")),r=t("TjRS"),c=(t("aD51"),{});void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/pages/use-debounced.mdx"}});var u={_frontmatter:c},d=r.a;function i(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(s.b)(d,Object(o.a)({},u,t,{components:n,mdxType:"MDXLayout"}),Object(s.b)("h1",{id:"use-debounced"},"Use Debounced"),Object(s.b)("p",null,"React hook for debounced operations. Sometimes you need to debounce changes of a value, for example when building a live search. The user types into the search box, but you don't want to make an API call every 10 milliseconds, so you need to debounce that input somehow. This is where this package comes in handy, it allows you to create a debounced version of a certain value."),Object(s.b)("pre",null,Object(s.b)("code",Object(o.a)({parentName:"pre"},{className:"language-bash"}),"yarn add @corets/use-debounced\n")),Object(s.b)("h2",{id:"usedebounced"},Object(s.b)("inlineCode",{parentName:"h2"},"useDebounced")),Object(s.b)("pre",null,Object(s.b)("code",Object(o.a)({parentName:"pre"},{className:"language-tsx"}),'import React from "react"\nimport { useState, useDebounced } from "@corets/use-debounced"\nimport { useAsync } from "@corets/use-async"\n\nconst findSomethingSomewhere = (query: string) => { /* some api call implementation */ }\n\nconst Example = () => {\n  const [input, setInput] = useState("")\n  const debouncedInput = useDebounced(input, 300)\n  const handle = useAsync(() =>\n    debouncedInput.trim() === ""\n      ? undefined\n      : findSomethingSomewhere(debouncedInput),\n    [debouncedInput]\n  )\n\n  return (\n    <div>\n      <input type="text" onChange={(e) => setInput(e.target.value)} value={input} />\n\n      { ! handle.result && ! handle.loading && <span>Type something into the search box</span>}\n      { handle.loading && <span>Loading...</span>}\n      { handle.errored && <span>There was an error: { handle.error.toString() }</span>}\n      { handle.result && <pre>{ JSON.stringify(handle.result) }</pre>}\n    </div>\n  )\n}\n')))}void 0!==i&&i&&i===Object(i)&&Object.isExtensible(i)&&!i.hasOwnProperty("__filemeta")&&Object.defineProperty(i,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/pages/use-debounced.mdx"}}),i.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-use-debounced-mdx-15ea44cc82e73685da37.js.map