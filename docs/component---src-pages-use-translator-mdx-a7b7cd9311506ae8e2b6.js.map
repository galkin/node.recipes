{"version":3,"sources":["webpack:///../src/pages/use-translator.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","repository","parentName","isMDXComponent"],"mappings":"oQASaA,G,UAAe,S,8MAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,YAAC,IAAD,CAAQC,WAAW,iBAAiBD,QAAQ,WAC5C,iBAAQ,CACN,GAAM,kBADR,kBAGA,kDAAiC,6BAAGE,WAAW,KAAQ,CACnD,KAAQ,gBADqB,sBAAjC,aAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,sCAIL,iBAAQ,CACN,GAAM,iBACL,0BAAYA,WAAW,MAAvB,kBACH,4GACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,ocAsBL,iBAAQ,CACN,GAAM,gBACL,0BAAYA,WAAW,MAAvB,iBACH,wHACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,skBA0BL,iBAAQ,CACN,GAAM,eACL,0BAAYA,WAAW,MAAvB,gBACH,uFACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,mpBA2BL,iBAAQ,CACN,GAAM,qBACL,0BAAYA,WAAW,MAAvB,sBACH,gFAA+D,0BAAYA,WAAW,KAAvB,qBAA/D,kBAA+I,0BAAYA,WAAW,KAAvB,iBAA/I,KAA8M,0BAAYA,WAAW,KAAvB,gBAA9M,QAA+Q,0BAAYA,WAAW,KAAvB,eAA/Q,oGACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,qqC,4MAmDTL,EAAWM,gBAAiB","file":"component---src-pages-use-translator-mdx-a7b7cd9311506ae8e2b6.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/mkt/Development/corets/corets/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Header } from \"../shared/Header\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Header repository=\"use-translator\" mdxType=\"Header\" />\n    <h1 {...{\n      \"id\": \"use-translator\"\n    }}>{`Use Translator`}</h1>\n    <p>{`React integration for the `}<a parentName=\"p\" {...{\n        \"href\": \"/translator\"\n      }}>{`@corets/translator`}</a>{` package.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn add @corets/use-translator\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"usetranslator\"\n    }}><inlineCode parentName=\"h2\">{`useTranslator`}</inlineCode></h2>\n    <p>{`Use translator inside components and re-render on language and translation changes:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from \"react\"\nimport { createTranslator } from \"@corets/translator\"\nimport { useTranslator } from \"@corets/use-translator\"\n\nconst translations = {\n  en: {\n    title: \"Foo\",\n    nested: { title: \"Bar\" }\n  }\n}\nconst translator = createTranslator(translations, { language: \"en\" })\n\nconst Example = () => {\n  const translator = useTranslator(translator)\n\n  return (\n    <div>Title: {translator.get(\"title\")}</div>\n  )\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"usetranslate\"\n    }}><inlineCode parentName=\"h2\">{`useTranslate`}</inlineCode></h2>\n    <p>{`Use a translation function inside components and re-render on language and translation changes:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from \"react\"\nimport { createTranslator } from \"@corets/translator\"\nimport { useTranslate } from \"@corets/use-translator\"\n\nconst translations = {\n  en: {\n    title: \"Foo\",\n    nested: { title: \"Bar\" }\n  }\n}\nconst translator = createTranslator(translations, { language: \"en\" })\n\nconst Exymple = () => {\n  const t = useTranslate(translator)\n  const tt = useTranslate(translator, { \"nested\" })\n\n  return (\n    <div>\n      <div>Title: {t(\"title\")}</div>\n      <div>Nested title: {tt(\"title\")}, same as: {t(\"nested.title\")}</div>\n    </div>\n  )\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"uselanguage\"\n    }}><inlineCode parentName=\"h2\">{`useLanguage`}</inlineCode></h2>\n    <p>{`Use languages related information inside your React component:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from \"react\"\nimport { createTranslator } from \"@corets/translator\"\nimport { useLanguage } from \"@corets/use-translator\"\n\nconst translations = {\n  en: {\n    title: \"Foo\",\n    nested: { title: \"Bar\" }\n  }\n}\nconst translator = createTranslator(translations, { language: \"en\" })\n\nconst Example = () => {\n  const language = useLanguage(translator)\n\n  return (\n    <div>\n      <div>Current: {language.current}</div>\n      <div>Fallback: {language.fallback}</div>\n      <div>Available: {JSON.stringify(language.available)}</div>\n      <button onClick={()=> language.set(\"de\")}>Set language to \"de\"</button>\n    </div>\n  )\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"translatorcontext\"\n    }}><inlineCode parentName=\"h2\">{`TranslatorContext`}</inlineCode></h2>\n    <p>{`You can share a translator instance through a dedicated `}<inlineCode parentName=\"p\">{`TranslatorContext`}</inlineCode>{`. Methods like `}<inlineCode parentName=\"p\">{`useTranslator`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`useTranslate`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`useLanguage`}</inlineCode>{` automatically try to find an instance in the context, so you don't have to extract it manually:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React ,{useContext}from \"react\"\nimport { createTranslator } from \"@corets/translator\"\nimport {\n  TranslatorContext,\n  useTranslator,\n  useTranslate,\n  useLanguage,\n} from \"@corets/use-translator\"\n\nconst translations = {\n  en: {\n    title: \"Foo\",\n    nested: { title: \"Bar\" }\n  }\n}\nconst translator = createTranslator(translations, { language: \"en\" })\n\nconst ExampleProvider = () => {\n  return (\n    <TranslatorContext.Provider value={translator}>\n      <Example />\n    </TranslatorContext.Provider>\n  )\n}\n\nconst Example = () => {\n  const translatorFromContext = useContext(TranslatorContext)\n  const alsoTranslatorFromContext = useTranslator()\n\n  const translateFunctionFromContext = useTranslate(translatorFromContext)\n  const alsoTranslateFunctionFromContext = useTranslate()\n\n  const languageFromContext = useLanguage(translatorFromContext)\n  const alsoLanguageFromContext = useLanguage()\n\n  const changeLanguage = () => languageFromContext.set(\"de\")\n\n  return (\n    <div>\n      <h1>Title: {translateFunctionFromContext(\"title\")}</h1>\n      <button onClick={changeLanguage}>Change language to \"de\"</button>\n    </div>\n  )\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}