{"version":3,"sources":["webpack:///../src/pages/use-debounced.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","repository","parentName","isMDXComponent"],"mappings":"sQASaA,G,UAAe,S,6MAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,YAAC,IAAD,CAAQC,WAAW,gBAAgBD,QAAQ,WAC3C,iBAAQ,CACN,GAAM,iBADR,iBAGA,kZACA,uBAAK,gCAAME,WAAW,OAAU,CAC5B,UAAa,kBADZ,qCAIL,iBAAQ,CACN,GAAM,gBACL,0BAAYA,WAAW,MAAvB,iBACH,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,q8B,2MAkCTL,EAAWM,gBAAiB","file":"component---src-pages-use-debounced-mdx-b5bd3e872b9178250e18.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/mkt/Development/corets/corets/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Header } from \"../shared/Header\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Header repository=\"use-debounced\" mdxType=\"Header\" />\n    <h1 {...{\n      \"id\": \"use-debounced\"\n    }}>{`Use Debounced`}</h1>\n    <p>{`React hook for debounced operations. Sometimes you need to debounce changes of a value, for example when building a live search. The user types into the search box, but you don't want to make an API call every 10 milliseconds, so you need to debounce that input somehow. This is where this package comes in handy, it allows you to create a debounced version of a certain value.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn add @corets/use-debounced\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"usedebounced\"\n    }}><inlineCode parentName=\"h2\">{`useDebounced`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from \"react\"\nimport { useState, useDebounced } from \"@corets/use-debounced\"\nimport { useAsync } from \"@corets/use-async\"\n\nconst findSomethingSomewhere = (query: string) => { /* some api call implementation */ }\n\nconst Example = () => {\n  const [input, setInput] = useState(\"\")\n  const debouncedInput = useDebounced(input, 300)\n  const handle = useAsync(() =>\n    debouncedInput.trim() === \"\"\n      ? undefined\n      : findSomethingSomewhere(debouncedInput),\n    [debouncedInput]\n  )\n\n  return (\n    <div>\n      <input type=\"text\" onChange={(e) => setInput(e.target.value)} value={input} />\n\n      { ! handle.result && ! handle.loading && <span>Type something into the search box</span>}\n      { handle.loading && <span>Loading...</span>}\n      { handle.errored && <span>There was an error: { handle.error.toString() }</span>}\n      { handle.result && <pre>{ JSON.stringify(handle.result) }</pre>}\n    </div>\n  )\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}