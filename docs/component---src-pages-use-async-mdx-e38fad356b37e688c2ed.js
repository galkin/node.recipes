(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{K9cW:function(e,n,a){"use strict";a.r(n),a.d(n,"_frontmatter",(function(){return c})),a.d(n,"default",(function(){return d}));var t=a("Fcif"),o=a("+I+c"),s=(a("mXGw"),a("/FXl")),r=a("BIGe"),c=(a("aD51"),{});void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/pages/use-async.mdx"}});var i={_frontmatter:c},l=r.a;function d(e){var n=e.components,a=Object(o.a)(e,["components"]);return Object(s.b)(l,Object(t.a)({},i,a,{components:n,mdxType:"MDXLayout"}),Object(s.b)("h1",{id:"use-async"},"Use Async"),Object(s.b)("p",null,"A convenient hook to deal with async operations inside React components."),Object(s.b)("pre",null,Object(s.b)("code",Object(t.a)({parentName:"pre"},{className:"language-bash"}),"yarn add @corets/use-async\n")),Object(s.b)("h2",{id:"useasyncasfdsafsadfasdfafasdfasfdasfdfasdf"},Object(s.b)("inlineCode",{parentName:"h2"},"useAsync.asfdsafsadfasdfafasdfasfdasfdfasdf")),Object(s.b)("p",null,"Function ",Object(s.b)("inlineCode",{parentName:"p"},"useAsync")," takes any other function that returns anything that can be ",Object(s.b)("em",{parentName:"p"},"awaited")," and returns its result as soon as the promise resolves. You also get some useful things like a ",Object(s.b)("inlineCode",{parentName:"p"},"loading")," indicator, the possible ",Object(s.b)("inlineCode",{parentName:"p"},"error")," that might have been thrown / or occurred through rejection and a ",Object(s.b)("inlineCode",{parentName:"p"},"reload")," function to rerun the async procedure. Async action can also be canceled with ",Object(s.b)("inlineCode",{parentName:"p"},"cancel")," or resolved directly using ",Object(s.b)("inlineCode",{parentName:"p"},"resolve"),"."),Object(s.b)("pre",null,Object(s.b)("code",Object(t.a)({parentName:"pre"},{className:"language-tsx"}),'import React from "react"\nimport { useAsync } from "@corets/use-async"\n\nconst fetchCommodityPrice = (commodity: string) =>\n  new Promise<string>((resolve) =>\n    setTimeout(\n      () => resolve(`${commodity}: 1000$`),\n      3000\n    ))\n\nconst Example = () => {\n  const handle = useAsync(() => fetchCommodityPrice("gold"), [])\n\n  if (handle.loading) {\n    return <span>Loading...</span>\n  }\n\n  if (handle.error) {\n    return <span>There was an error :(</span>\n  }\n\n  const handleReload = () => handle.reload()\n  const handleReloadWithOverride = () => handle.reload(() => fetchCommodityPrice("silver"))\n  const handleResolve = () => handle.resolve("Platinum: 99999$")\n  const handleCancel = () => handle.cancel()\n\n  return (\n    <div>\n      <span>{handle.result}</span>\n      <button onClick={handleReload}>reload</button>\n      <button onClick={handleReloadWithOverride}>override reload</button>\n      <button onClick={handleResolve}>resolve immediately</button>\n      <button onClick={handleCancel}>cancel</button>\n    </div>\n  )\n}\n')))}void 0!==d&&d&&d===Object(d)&&Object.isExtensible(d)&&!d.hasOwnProperty("__filemeta")&&Object.defineProperty(d,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/pages/use-async.mdx"}}),d.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-use-async-mdx-e38fad356b37e688c2ed.js.map