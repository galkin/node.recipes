{"version":3,"sources":["webpack:///../src/pages/tag.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"wPAQaA,G,UAAe,S,mMAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,OADR,OAGA,6BAAY,kBAAIC,WAAW,KAAf,WAAZ,mBAAmE,kBAAIA,WAAW,KAAf,YAAnE,+PAAuW,kBAAIA,WAAW,KAAf,SAAvW,gDACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,2BAIL,iBAAQ,CACN,GAAM,eADR,eAGA,iEACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,yDAQL,qDAAoC,0BAAYA,WAAW,KAAvB,QAApC,6BAAkH,0BAAYA,WAAW,KAAvB,QAAlH,SAA4K,0BAAYA,WAAW,KAAvB,UAA5K,qBAAoP,0BAAYA,WAAW,KAAvB,QAApP,KACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,6CAIL,8EAA6D,kBAAIA,WAAW,KAAf,QAA7D,sFAAoL,0BAAYA,WAAW,KAAvB,UAApL,KACA,kEACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,uSAgBL,mDAAkC,0BAAYA,WAAW,KAAvB,UAAlC,qBAA0G,0BAAYA,WAAW,KAAvB,UAA1G,+BAA4L,0BAAYA,WAAW,KAAvB,UAA5L,SAAwP,0BAAYA,WAAW,KAAvB,QAAxP,wGAAiZ,0BAAYA,WAAW,KAAvB,QAAjZ,8BACA,qBAAG,sBAAQA,WAAW,KAAnB,SAAH,+HACA,iBAAQ,CACN,GAAM,iBACL,0BAAYA,WAAW,MAAvB,qBACH,kCAAiB,kBAAIA,WAAW,KAAf,WAAjB,2CACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,6MAWL,qBAAG,sBAAQA,WAAW,KAAnB,SAAH,uCAAoF,kBAAIA,WAAW,KAAf,WAApF,iH,iMAKJJ,EAAWK,gBAAiB","file":"component---src-pages-tag-mdx-18b16b42133b88c5f4a4.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/mkt/Development/corets/corets/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"tag\"\n    }}>{`Tag`}</h1>\n    <p>{`Type `}<em parentName=\"p\">{`tagging`}</em>{` (also known as `}<em parentName=\"p\">{`branding`}</em>{`) is a common practice in advanced TypeScript setups. The main purpose of this approach is to make certain primitive types more predictable. Using branded types leads to a better traceability of data in the project and encourages developers to be more `}<em parentName=\"p\">{`aware`}</em>{` when working with critical, primitive data.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn add @corets/tag\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"quick-start\"\n    }}>{`Quick Start`}</h2>\n    <p>{`Let's have a look at this example below:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`type UUID = string\n\ntype User = {\n  id: UUID\n}\n`}</code></pre>\n    <p>{`We have created a type alias `}<inlineCode parentName=\"p\">{`UUID`}</inlineCode>{` that is used on the type `}<inlineCode parentName=\"p\">{`User`}</inlineCode>{`. Any `}<inlineCode parentName=\"p\">{`string`}</inlineCode>{` value is a valid `}<inlineCode parentName=\"p\">{`UUID`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const user: User = { id: \"some-uuid\" }\n`}</code></pre>\n    <p>{`This is very implicit, not traceable, and is not very `}<em parentName=\"p\">{`safe`}</em>{` since you pay less attention to what is passed around, since everything is just a `}<inlineCode parentName=\"p\">{`string`}</inlineCode>{`.`}</p>\n    <p>{`What if we could make this more explicit?`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { Tag } from \"@corets/tag\"\n\ntype UUID = Tag<string, \"uuid\">\n\ntype User = {\n    id: UUID\n}\n\n// this will not work since string is not assignable to UUID\nconst user1: User = { id: \"some-uuid\" }\n\n// exlicitly cast it to UUID\nconst user2: User = { id: \"some-uuid\" as UUID }\n`}</code></pre>\n    <p>{`Now we are using a branded `}<inlineCode parentName=\"p\">{`string`}</inlineCode>{` instead of plain `}<inlineCode parentName=\"p\">{`string`}</inlineCode>{`. You cannot assign a plain `}<inlineCode parentName=\"p\">{`string`}</inlineCode>{` to a `}<inlineCode parentName=\"p\">{`UUID`}</inlineCode>{` anymore, if you do so, you have to cast it explicitly. Now you also have full traceability on where `}<inlineCode parentName=\"p\">{`UUID`}</inlineCode>{`s are used in the project.`}</p>\n    <p><strong parentName=\"p\">{`Note:`}</strong>{` You can go even further and add some type guards, a factory function, etc. for tagged types, but this is not covered here.`}</p>\n    <h2 {...{\n      \"id\": \"tagtype-alias\"\n    }}><inlineCode parentName=\"h2\">{`Tag<type, alias>`}</inlineCode></h2>\n    <p>{`Creates a `}<em parentName=\"p\">{`branded`}</em>{` type for any kind of primitive values:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { Tag } from \"@corets/tag\"\n\nconst Email = Tag<string, \"email\">\n\n// this will work\nconst email2: Email = \"foo@bar.com\" as Email\n// this will not work\nconst email1: Email = \"foo@bar.com\"\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Note:`}</strong>{` You get full traceability of where `}<em parentName=\"p\">{`branded`}</em>{` types are used in your project, since you always have to cast a primitive value to that specific type!`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}