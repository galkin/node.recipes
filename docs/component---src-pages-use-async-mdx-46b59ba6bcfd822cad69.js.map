{"version":3,"sources":["webpack:///../src/pages/use-async.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"wPAQaA,G,UAAe,S,yMAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,aADR,aAGA,iGACA,uBAAK,gCAAMC,WAAW,OAAU,CAC5B,UAAa,kBADZ,iCAIL,iBAAQ,CACN,GAAM,YACL,0BAAYA,WAAW,MAAvB,aACH,iCAAgB,0BAAYA,WAAW,KAAvB,YAAhB,+DAAoI,kBAAIA,WAAW,KAAf,WAApI,mGAA2Q,0BAAYA,WAAW,KAAvB,WAA3Q,4BAA2V,0BAAYA,WAAW,KAAvB,SAA3V,sEAAmd,0BAAYA,WAAW,KAAvB,UAAnd,kFAAwlB,0BAAYA,WAAW,KAAvB,UAAxlB,+BAA0qB,0BAAYA,WAAW,KAAvB,WAA1qB,KACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,ujC,uMA2CTJ,EAAWK,gBAAiB","file":"component---src-pages-use-async-mdx-46b59ba6bcfd822cad69.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/mkt/Development/corets/corets/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"use-async\"\n    }}>{`Use Async`}</h1>\n    <p>{`A convenient hook to deal with async operations inside React components.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn add @corets/use-async\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"useasync\"\n    }}><inlineCode parentName=\"h2\">{`useAsync`}</inlineCode></h2>\n    <p>{`Function `}<inlineCode parentName=\"p\">{`useAsync`}</inlineCode>{` takes any other function that returns anything that can be `}<em parentName=\"p\">{`awaited`}</em>{` and returns its result as soon as the promise resolves. You also get some useful things like a `}<inlineCode parentName=\"p\">{`loading`}</inlineCode>{` indicator, the possible `}<inlineCode parentName=\"p\">{`error`}</inlineCode>{` that might have been thrown / or occurred through rejection and a `}<inlineCode parentName=\"p\">{`reload`}</inlineCode>{` function to rerun the async procedure. Async action can also be canceled with `}<inlineCode parentName=\"p\">{`cancel`}</inlineCode>{` or resolved directly using `}<inlineCode parentName=\"p\">{`resolve`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from \"react\"\nimport { useAsync } from \"@corets/use-async\"\n\nconst fetchCommodityPrice = (commodity: string) =>\n  new Promise<string>((resolve) =>\n    setTimeout(\n      () => resolve(\\`\\${commodity}: 1000$\\`),\n      3000\n    ))\n\nconst Example = () => {\n  const handle = useAsync(() => fetchCommodityPrice(\"gold\"), [])\n\n  if (handle.loading) {\n    return <span>Loading...</span>\n  }\n\n  if (handle.error) {\n    return <span>There was an error :(</span>\n  }\n\n  const handleReload = () => handle.reload()\n  const handleReloadWithOverride = () => handle.reload(() => fetchCommodityPrice(\"silver\"))\n  const handleResolve = () => handle.resolve(\"Platinum: 99999$\")\n  const handleCancel = () => handle.cancel()\n\n  return (\n    <div>\n      <span>{handle.result}</span>\n      <button onClick={handleReload}>reload</button>\n      <button onClick={handleReloadWithOverride}>override reload</button>\n      <button onClick={handleResolve}>resolve immediately</button>\n      <button onClick={handleCancel}>cancel</button>\n    </div>\n  )\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}