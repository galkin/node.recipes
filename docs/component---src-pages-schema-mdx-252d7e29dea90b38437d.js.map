{"version":3,"sources":["webpack:///../src/pages/schema.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","repository","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-schema-mdx-252d7e29dea90b38437d.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/mkt/Development/corets/corets/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Header } from \"../shared/Header\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Header repository=\"schema\" mdxType=\"Header\" />\n    <h1 {...{\n      \"id\": \"schema\"\n    }}>{`Schema`}</h1>\n    <p>{`This library provides an easy and powerful way to describe, validate and sanitize things like objects, arrays, strings numbers, dates and so on. It can be used for complex validation scenarios as well as simple one-line assertions.`}</p>\n    <p>{`You can mix and match these kinds of schemas: `}<a parentName=\"p\" {...{\n        \"href\": \"#object\"\n      }}><inlineCode parentName=\"a\">{`object`}</inlineCode></a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"#string\"\n      }}><inlineCode parentName=\"a\">{`string`}</inlineCode></a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"#number\"\n      }}><inlineCode parentName=\"a\">{`number`}</inlineCode></a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"#array\"\n      }}><inlineCode parentName=\"a\">{`array`}</inlineCode></a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"#boolean\"\n      }}><inlineCode parentName=\"a\">{`boolean`}</inlineCode></a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"#date\"\n      }}><inlineCode parentName=\"a\">{`date`}</inlineCode></a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"#mixed\"\n      }}><inlineCode parentName=\"a\">{`mixed`}</inlineCode></a></p>\n    <p>{`There are two ways to run validations. For simple things like one-liners where you simply want to know if a value matches certain criteria, and get a `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{` as result, you can use the `}<a parentName=\"p\" {...{\n        \"href\": \"#schematest\"\n      }}><inlineCode parentName=\"a\">{`Schema.test()`}</inlineCode></a>{` method. For proper validation, with error messages as result, you can use the `}<a parentName=\"p\" {...{\n        \"href\": \"#schemavalidate\"\n      }}><inlineCode parentName=\"a\">{`validate()`}</inlineCode></a>{` method.`}</p>\n    <p>{`Every schema specialises on a specific data type and comes with various assertion and sanitization methods. Some methods you'll be able to find on every schema, others are exclusive to a specific kind of schema.`}</p>\n    <p>{`Assertions are used for validation purposes to ensure that a value is valid.`}</p>\n    <p>{`Sanitization methods are called before validation and are used to normalise the underlying values. For example, you can ensure that a string is capitalised and all object keys are camel-cased. Sanitization can help you reduce the number of validation errors by proactively fixing them in the first place. All sanitization methods start with the prefix `}<inlineCode parentName=\"p\">{`to`}</inlineCode>{`, for example: `}<a parentName=\"p\" {...{\n        \"href\": \"#stringtotrimmed\"\n      }}><inlineCode parentName=\"a\">{`string.toTrimmed()`}</inlineCode></a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"#stringtodefault\"\n      }}><inlineCode parentName=\"a\">{`string.toDefault()`}</inlineCode></a>{`.`}</p>\n    <p>{`Feature overview:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Works everywhere`}</strong>{`, use it in React, React Native, Angular, Vue or NodeJs`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Tons of validation methods`}</strong>{` for many kinds of inputs`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Many sanitization methods`}</strong>{` for data normalization`}</li>\n      <li parentName=\"ul\">{`Typed from tail to toe for `}<strong parentName=\"li\">{`Amazing  developer experience`}</strong></li>\n      <li parentName=\"ul\">{`Very `}<strong parentName=\"li\">{`Intuitive API`}</strong></li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Build any kind of schema you can think of`}</strong></li>\n      <li parentName=\"ul\">{`Supports `}<strong parentName=\"li\">{`Sync and Async`}</strong>{` validation and sanitization`}</li>\n      <li parentName=\"ul\">{`Encourages you to build `}<strong parentName=\"li\">{`Reusable schemas`}</strong></li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Combine multiple schemas`}</strong>{` into more complex ones`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Combine schemas logically`}</strong>{` through conditions`}</li>\n      <li parentName=\"ul\">{`Add `}<strong parentName=\"li\">{`Custom validation and sanitization`}</strong>{` logic with ease`}</li>\n      <li parentName=\"ul\">{`Easily `}<strong parentName=\"li\">{`Override error messages`}</strong>{` on the fly`}</li>\n      <li parentName=\"ul\">{`Comes `}<strong parentName=\"li\">{`Translated into 6 different languages`}</strong>{`: English, German, French, Italian, Spanish and Russian`}</li>\n      <li parentName=\"ul\">{`Very `}<strong parentName=\"li\">{`Easy to add a new language`}</strong></li>\n      <li parentName=\"ul\">{`Very `}<strong parentName=\"li\">{`Easy to override translations`}</strong></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn add @corets/schema\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"quick-start\"\n    }}>{`Quick start`}</h2>\n    <p>{`Here is an example of all the available schemas and how to import them.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string, number, array, boolean, date, object, mixed } from \"@corets/schema\"\n`}</code></pre>\n    <p>{`Let's describe a simple user object.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Property `}<em parentName=\"li\">{`email`}</em>{` must be of type string and a valid email address`}</li>\n      <li parentName=\"ul\">{`Property `}<em parentName=\"li\">{`fullName`}</em>{` must be a string  between 3 and 100 characters`}</li>\n      <li parentName=\"ul\">{`Property `}<em parentName=\"li\">{`roles`}</em>{` must be an array containing at least one role, valid roles are `}<em parentName=\"li\">{`admin`}</em>{`, `}<em parentName=\"li\">{`publisher`}</em>{` and `}<em parentName=\"li\">{`developer`}</em>{`, no duplicates are allowed`}</li>\n      <li parentName=\"ul\">{`Property `}<em parentName=\"li\">{`tags`}</em>{` must be an array of strings, each at least 3 characters long and consisting of letter and dashes`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { array, object, string } from \"@corets/schema\"\n\nconst userSchema = object({\n  email: string().email(),\n  fullName: string().min(3).max(100),\n  roles: array().min(1).someOf([\"admin\", \"publisher\", \"developer\"]).toUnique(),\n  tags: array(string().min(3).alphaDashes())\n})\n`}</code></pre>\n    <p>{`The schema above contains some validation assertions as well as some sanitization logic.`}</p>\n    <p>{`Quick check if an object is valid according to the schema:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const valid = userSchema.test({ /* ... */ })\n\nif (valid) {\n  // ...\n}\n`}</code></pre>\n    <p>{`Get a detailed list of errors:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const errors = userSchema.validate({ /* ... */ })\n\nif ( ! errors) {\n  // ...\n}\n`}</code></pre>\n    <p>{`The errors object would look something like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`{\n  \"field\": [\"first error\", \"second error\"],\n  \"nested.field\": [\"first error\", \"second error\"],\n}\n`}</code></pre>\n    <p>{`Run sanitizers like `}<a parentName=\"p\" {...{\n        \"href\": \"#arraytounique\"\n      }}><inlineCode parentName=\"a\">{`array.toUnique()`}</inlineCode></a>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const sanitizedValue = userSchema.sanitize({ /* ... */ })\n`}</code></pre>\n    <p>{`Test, validated and sanitize at the same time:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const [valid, sanitizedValue] = userSchema.sanitizeAndTest({ /* ... */ })\nconst [errors, sanitizedValue] = userSchema.sanitizeAndValidate({ /* ... */ })\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"combining-schemas\"\n    }}>{`Combining schemas`}</h2>\n    <p>{`Schemas can be freely combined with one another. When describing arrays and objects you have no way around it.`}</p>\n    <p>{`Here is an example of two schemas being combined:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { array, string } from \"@corets/schema\"\n\n// a valid username is alpha numeric and has a length from 3 to 10 characters\nconst usernameSchema = string().alphaNumeric().between(3, 10)\n\n// array contain at least 3 valid usernames\nconst usernameListSchema = array(usernameSchema).min(3)\n\nconst errors = usernameListSchema.validate([\"foo\", \"bar\", \"baz\"])\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Note:`}</strong>{` Consider writing schemas that are reusable!`}</p>\n    <h2 {...{\n      \"id\": \"conditional-validations\"\n    }}>{`Conditional validations`}</h2>\n    <p>{`Schemas can be logically linked together using methods `}<a parentName=\"p\" {...{\n        \"href\": \"#schemaand\"\n      }}><inlineCode parentName=\"a\">{`Schema.and()`}</inlineCode></a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"#schemaor\"\n      }}><inlineCode parentName=\"a\">{`Schema.or()`}</inlineCode></a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"#schemaalso\"\n      }}><inlineCode parentName=\"a\">{`Schema.also()`}</inlineCode></a>{`. A `}<a parentName=\"p\" {...{\n        \"href\": \"#schemaand\"\n      }}><inlineCode parentName=\"a\">{`Schema.and()`}</inlineCode></a>{` relation will only be executed if the parent schema, that it is linked to, could validate successfully. A `}<a parentName=\"p\" {...{\n        \"href\": \"#schemaor\"\n      }}><inlineCode parentName=\"a\">{`Schema.or()`}</inlineCode></a>{` relation will only execute if the parent schema failed, the `}<a parentName=\"p\" {...{\n        \"href\": \"#schemaor\"\n      }}><inlineCode parentName=\"a\">{`Schema.or()`}</inlineCode></a>{` schema will be attempted instead. A `}<a parentName=\"p\" {...{\n        \"href\": \"#schemaalso\"\n      }}><inlineCode parentName=\"a\">{`Schema.also()`}</inlineCode></a>{` relation will execute regardless of the validation status of the parent schema.`}</p>\n    <p>{`Example of a `}<a parentName=\"p\" {...{\n        \"href\": \"#schemaand\"\n      }}><inlineCode parentName=\"a\">{`Schema.and()`}</inlineCode></a>{` relation, this schema will first ensure that the value is a string, and only if the first validation passes, it will test if the value is a numeric string:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nstring().and(string().numeric())\n`}</code></pre>\n    <p>{`Example of a `}<a parentName=\"p\" {...{\n        \"href\": \"#schemaor\"\n      }}><inlineCode parentName=\"a\">{`Schema.or()`}</inlineCode></a>{` relation, this schema will first check if the value is a number, and only if it's not, it will test if that value is a numeric string:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { number, string } from \"@corets/schema\"\n\nnumber().or(string().numeric())\n`}</code></pre>\n    <p>{`Example of an `}<a parentName=\"p\" {...{\n        \"href\": \"#schemaalso\"\n      }}><inlineCode parentName=\"a\">{`Schema.also()`}</inlineCode></a>{` relation, this schema will execute both parts regardless of the validation outcome of the parent schema:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { number, string } from \"@corets/schema\"\n\n// this validation will never pass!\nnumber().also(string().numeric())\n`}</code></pre>\n    <p>{`Conditional schemas can be wrapped into a function, this allows you to define schemas dynamically during the validation:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nstring().and(() => string().numeric())\nstring().or(() => string().numeric())\nstring().also(() => string().numeric())\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Note:`}</strong>{` Given that schemas can be freely combined and defined at validation time, this means you can als do the same with sanitizers!`}</p>\n    <h2 {...{\n      \"id\": \"custom-validations\"\n    }}>{`Custom validations`}</h2>\n    <p>{`Methods `}<a parentName=\"p\" {...{\n        \"href\": \"#schemaand\"\n      }}><inlineCode parentName=\"a\">{`Schema.and()`}</inlineCode></a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"#schemaor\"\n      }}><inlineCode parentName=\"a\">{`Schema.or()`}</inlineCode></a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"#schemaalso\"\n      }}><inlineCode parentName=\"a\">{`Schema.also()`}</inlineCode></a>{` do not always have to return another schema. They can be used for your custom validations functions. A custom validation function can return either another schema, a validation result, or an error message.`}</p>\n    <p>{`Example of a validation function returning an error message:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { number } from \"@corets/schema\"\n\nconst customValidation = (value: any) => value < 12 && \"Must be bigger than 12\"\n\nnumber().and(customValidation)\nnumber().or(customValidation)\nnumber().also(customValidation)\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Note:`}</strong>{` You can also return multiple error messages.`}</p>\n    <p>{`Example of a validation function returning a schema:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nconst customValidation = (value: any) => value.includes(\"@\") && string().email()\n\nstring().and(customValidation)\nstring().or(customValidation)\nstring().also(customValidation)\n`}</code></pre>\n    <p>{`Example of a validation function returning schema validation errors:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nconst customValidation = (value: any) => value.includes(\"@\") && string().email().verify(value)\n\nstring().and(customValidation)\nstring().or(customValidation)\nstring().also(customValidation)\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Note:`}</strong>{` In order to return schema errors, you have to use the method `}<a parentName=\"p\" {...{\n        \"href\": \"#schemaverify\"\n      }}><inlineCode parentName=\"a\">{`Schema.verify()`}</inlineCode></a>{` instead of `}<a parentName=\"p\" {...{\n        \"href\": \"#schemavalidate\"\n      }}><inlineCode parentName=\"a\">{`Schema.validate()`}</inlineCode></a>{`, since it returns errors in a format that can be processed internally. Most of the time you should simply return the schema, instead of invoking it manually.`}</p>\n    <h2 {...{\n      \"id\": \"custom-sanitizers\"\n    }}>{`Custom sanitizers`}</h2>\n    <p>{`You can add a custom sanitizer with the method `}<a parentName=\"p\" {...{\n        \"href\": \"#schemamap\"\n      }}><inlineCode parentName=\"a\">{`Schema.map()`}</inlineCode></a>{`.`}</p>\n    <p>{`Here is an example of a sanitizer that converts everything to a string:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nconst customSanitizer = (value: any) => value.toString()\n\nconst sanitizedValue = string().map(customSanitizer).sanitize(1234)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"translations\"\n    }}>{`Translations`}</h2>\n    <p>{`This library uses the `}<a parentName=\"p\" {...{\n        \"href\": \"/translator\"\n      }}>{`@corets/translator`}</a>{` package for translations.`}</p>\n    <p>{`You can change the default translator language like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { schemaTranslator } from \"@corets/schema\"\n\nschemaTranslator.setLanguage(\"en\")\n`}</code></pre>\n    <p>{`You can also request a specific language during validation like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nstring().validate(\"foo\", { language: \"ru\", fallbackLanguage: \"en\" })\nstring().verify(\"foo\", { language: \"ru\", fallbackLanguage: \"en\" })\nstring().sanitizeAndValidate(\"foo\", { language: \"ru\", fallbackLanguage: \"en\" })\nstring().sanitizeAndVerify(\"foo\", { language: \"ru\", fallbackLanguage: \"en\" })\n`}</code></pre>\n    <p>{`Get a full list of all translations:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { schemaTranslator } from \"@corets/schema\"\n\nconsole.log(schemaTranslator.getTranslations())\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Note:`}</strong>{` You can also find the whole list `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/corets/schema/tree/master/src/locales\"\n      }}>{`here`}</a>{`. For further examples on how to replace translations, add new languages and so on, please have a look at the `}<a parentName=\"p\" {...{\n        \"href\": \"/translator\"\n      }}>{`@corets/translator`}</a>{` docs.`}</p>\n    <h2 {...{\n      \"id\": \"schematest\"\n    }}><inlineCode parentName=\"h2\">{`Schema.test`}</inlineCode></h2>\n    <p>{`This method simply indicates whether a value is valid or not by returning a boolean.`}</p>\n    <p>{`Example of a successful assertion:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nconst schema = string().min(3).alphaNumeric()\n\n// true\nconst valid = schema.test(\"fooBar\")\n\nif (valid) {\n  // ...\n}\n`}</code></pre>\n    <p>{`Example of a failed assertion:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nconst schema = string().min(3).alphaNumeric()\n\n// false\nconst valid = schema.test(\"foo-bar\")\n\nif (valid) {\n  // ...\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"schemavalidate\"\n    }}><inlineCode parentName=\"h2\">{`Schema.validate`}</inlineCode></h2>\n    <p>{`This method returns a validation result containing detailed error messages about why a value did not pass validation.`}</p>\n    <p>{`Example of a successful validation:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nconst schema = string().min(3).alphaNumeric()\n\n// undefined\nconst errors = schema.validate(\"fooBar\")\n\nif ( ! errors) {\n  // ...\n}\n`}</code></pre>\n    <p>{`Example of a failed validation:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nconst schema = string().min(3).alphaNumeric()\n\n// [ ... ]\nconst errors = schema.validate(\"foo-bar\")\n\nif ( ! errors) {\n  // ...\n}\n`}</code></pre>\n    <p>{`This is what the validation result might look like:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`{\n  \"field\": [\"first error\", \"second error\"],\n  \"nested.field\": [\"first error\", \"second error\"],\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Note:`}</strong>{` when validating anything but an object, you'll find the error messages under the key `}<inlineCode parentName=\"p\">{`self`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"schemaverify\"\n    }}><inlineCode parentName=\"h2\">{`Schema.verify`}</inlineCode></h2>\n    <p>{`This method works the same as `}<a parentName=\"p\" {...{\n        \"href\": \"#schemavalidate\"\n      }}><inlineCode parentName=\"a\">{`Schema.validate()`}</inlineCode></a>{`, except it returns errors in a slightly different format. This format contains additional information about each error message and can be used for further processing of validation errors.`}</p>\n    <p>{`Example of a failed validation:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nconst errors = string().min(10).verify(\"foo\")\n`}</code></pre>\n    <p>{`Here is an example of how the error messages would look like:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`[\n  {\n    // validation identifier, this value is also used as a translation key\n    // in case of a custom validation, this value is set to \"custom\"\n    \"type\": \"string_min\",\n    // translated error message, or the string that was\n    // return from a custom validation function\n    \"message\": \"Must be at least \\\\\"2\\\\\" characters long\",\n    // arguments that have been passed to the validation method\n    \"args\": [10],\n    // the actual value that was validated\n    \"value\": \"foo\",\n    // logical link in case of relation trough and(), or() and also()\n    \"link\": undefined,\n    // path to the validated property, if the validation has been called on an object\n    \"path\": undefined\n  }\n]\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"schemasanitize\"\n    }}><inlineCode parentName=\"h2\">{`Schema.sanitize`}</inlineCode></h2>\n    <p>{`This method applies sanitizers returns the sanitized value:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nconst schema = string().toTrimmed().toCamelCase()\n\n// \"fooBar\"\nconst value = schema.sanitize(\"  foo bar  \")\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Note:`}</strong>{` All sanitization methods always start with the prefix `}<inlineCode parentName=\"p\">{`to`}</inlineCode>{`, for example: `}<a parentName=\"p\" {...{\n        \"href\": \"#stringtotrimmed\"\n      }}><inlineCode parentName=\"a\">{`string.toTrimmed()`}</inlineCode></a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"#stringtodefault\"\n      }}><inlineCode parentName=\"a\">{`string.toDefault()`}</inlineCode></a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"schemasanitizeandtest\"\n    }}><inlineCode parentName=\"h2\">{`Schema.sanitizeAndTest`}</inlineCode></h2>\n    <p>{`This method applies sanitizers on the underlying value and runs validation against the sanitized version. It returns a boolean indicating whether the value is valid, and the sanitized version of the value. Basically this calls the methods `}<a parentName=\"p\" {...{\n        \"href\": \"#schemasanitize\"\n      }}><inlineCode parentName=\"a\">{`Schema.sanitize()`}</inlineCode></a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"#schematest\"\n      }}><inlineCode parentName=\"a\">{`Schema.test()`}</inlineCode></a>{` sequentially.`}</p>\n    <p>{`Example of a Successful test with sanitizers:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nconst schema = string().min(4).toCamelCase()\n\n// [true, \"fooBar\"]\nconst [valid, value] = schema.sanitizeAndTest(\"foo bar\")\n`}</code></pre>\n    <p>{`Example of a failed test with sanitizers:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nconst schema = string().min(4).toTrimmed()\n\n// [false, \"foo\"]\nconst [valid, value] = schema.sanitizeAndTest(\"  foo  \")\n`}</code></pre>\n    <p>{`As you can see, even though the string `}<inlineCode parentName=\"p\">{`\"  foo  \"`}</inlineCode>{` has a length greater than `}<inlineCode parentName=\"p\">{`4`}</inlineCode>{`. During the sanitization, the string  gets trimmed, becomes`}<inlineCode parentName=\"p\">{`\"foo\"`}</inlineCode>{` and therefore the test will fail.`}</p>\n    <p><strong parentName=\"p\">{`Note:`}</strong>{` All sanitization methods always start with the prefix `}<inlineCode parentName=\"p\">{`to`}</inlineCode>{`, for example: `}<a parentName=\"p\" {...{\n        \"href\": \"#stringtotrimmed\"\n      }}><inlineCode parentName=\"a\">{`string.toTrimmed()`}</inlineCode></a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"#stringtodefault\"\n      }}><inlineCode parentName=\"a\">{`string.toDefault()`}</inlineCode></a></p>\n    <h2 {...{\n      \"id\": \"schemasanitizeandvalidate\"\n    }}><inlineCode parentName=\"h2\">{`Schema.sanitizeAndValidate`}</inlineCode></h2>\n    <p>{`This method applies sanitizers on the underlying value and runs validation against the sanitized version. It returns a validation result containing detailed error messages about why a value did not pass validation, and the sanitized version of the value. Basically this calls the methods `}<a parentName=\"p\" {...{\n        \"href\": \"#schemasanitize\"\n      }}><inlineCode parentName=\"a\">{`Schema.sanitize()`}</inlineCode></a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"#schemavalidate\"\n      }}><inlineCode parentName=\"a\">{`Schema.validate()`}</inlineCode></a>{` sequentially.`}</p>\n    <p>{`Example of a successful validation with sanitizers:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nconst schema = string().min(4).toCamelCase()\n\n// [undefined, \"fooBar\"]\nconst [errors, value] = schema.sanitizeAndValidate(\"foo bar\")\n`}</code></pre>\n    <p>{`Example of a failed validation with sanitizers:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nconst schema = string().min(4).toTrimmed()\n\n// [{ ... }, \"foo\"]\nconst [errors, value] = schema.sanitizeAndValidate(\"  foo  \")\n`}</code></pre>\n    <p>{`This is what the errors would look like:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`{\n  \"self\": [\"Must be at least \\\\\"4\\\\\" characters long\"],\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"schemasanitizeandverify\"\n    }}><inlineCode parentName=\"h2\">{`Schema.sanitizeAndVerify`}</inlineCode></h2>\n    <p>{`This method works exactly the same as `}<a parentName=\"p\" {...{\n        \"href\": \"#schemasanitizeandvalidate\"\n      }}><inlineCode parentName=\"a\">{`sanitizeAndValidate()`}</inlineCode></a>{` except that it returns error messages in a different format with additional information. Take a look at `}<a parentName=\"p\" {...{\n        \"href\": \"#schemasanitizeandvalidate\"\n      }}><inlineCode parentName=\"a\">{`sanitizeAndValidate()`}</inlineCode></a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"#schemaverify\"\n      }}><inlineCode parentName=\"a\">{`verify()`}</inlineCode></a>{`.`}</p>\n    <p><strong parentName=\"p\">{`Note:`}</strong>{` All sanitization methods always start with the prefix `}<inlineCode parentName=\"p\">{`to`}</inlineCode>{`, for example: `}<a parentName=\"p\" {...{\n        \"href\": \"#stringtotrimmed\"\n      }}><inlineCode parentName=\"a\">{`string.toTrimmed()`}</inlineCode></a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"#stringtodefault\"\n      }}><inlineCode parentName=\"a\">{`string.toDefault()`}</inlineCode></a></p>\n    <h2 {...{\n      \"id\": \"schematestasync\"\n    }}><inlineCode parentName=\"h2\">{`Schema.testAsync`}</inlineCode></h2>\n    <p>{`This is an async version of the `}<a parentName=\"p\" {...{\n        \"href\": \"#schematest\"\n      }}><inlineCode parentName=\"a\">{`Schema.test()`}</inlineCode></a>{` method, that allows you to use async validators on the schema.`}</p>\n    <p><strong parentName=\"p\">{`Note:`}</strong>{` This library has no async validation or sanitization methods itself, but you can add your own.`}</p>\n    <h2 {...{\n      \"id\": \"schemavalidateasync\"\n    }}><inlineCode parentName=\"h2\">{`Schema.validateAsync`}</inlineCode></h2>\n    <p>{`This is an async version of the `}<a parentName=\"p\" {...{\n        \"href\": \"#schemavalidate\"\n      }}><inlineCode parentName=\"a\">{`Schema.validate()`}</inlineCode></a>{` method, that allows you to use async validators on the schema.`}</p>\n    <p><strong parentName=\"p\">{`Note:`}</strong>{` This library has no async validation or sanitization methods itself, but you can add your own.`}</p>\n    <h2 {...{\n      \"id\": \"schemaverifyasync\"\n    }}><inlineCode parentName=\"h2\">{`Schema.verifyAsync`}</inlineCode></h2>\n    <p>{`This is an async version of the `}<a parentName=\"p\" {...{\n        \"href\": \"#schemaverify\"\n      }}><inlineCode parentName=\"a\">{`Schema.verify()`}</inlineCode></a>{` method, that allows you to use async validators on the schema.`}</p>\n    <p><strong parentName=\"p\">{`Note:`}</strong>{` This library has no async validation or sanitization methods itself, but you can add your own.`}</p>\n    <h2 {...{\n      \"id\": \"schemasanitizeasync\"\n    }}><inlineCode parentName=\"h2\">{`Schema.sanitizeAsync`}</inlineCode></h2>\n    <p>{`This is an async version of the `}<a parentName=\"p\" {...{\n        \"href\": \"#schemasanitize\"\n      }}><inlineCode parentName=\"a\">{`Schema.sanitize()`}</inlineCode></a>{` method, that allows you to use async sanitizers on the schema.`}</p>\n    <p><strong parentName=\"p\">{`Note:`}</strong>{` This library has no async validation or sanitization methods itself, but you can add your own.`}</p>\n    <h2 {...{\n      \"id\": \"schemasanitizeandtestasync\"\n    }}><inlineCode parentName=\"h2\">{`Schema.sanitizeAndTestAsync`}</inlineCode></h2>\n    <p>{`This is an async version of the `}<a parentName=\"p\" {...{\n        \"href\": \"#schemasanitizeandtest\"\n      }}><inlineCode parentName=\"a\">{`Schema.sanitizeAndTest()`}</inlineCode></a>{` method, that allows you to use async validators and sanitizers on the schema.`}</p>\n    <p><strong parentName=\"p\">{`Note:`}</strong>{` This library has no async validation or sanitization methods itself, but you can add your own.`}</p>\n    <h2 {...{\n      \"id\": \"schemasanitizeandvalidateasync\"\n    }}><inlineCode parentName=\"h2\">{`Schema.sanitizeAndValidateAsync`}</inlineCode></h2>\n    <p>{`This is an async version of the `}<a parentName=\"p\" {...{\n        \"href\": \"#schemasanitizeandvalidate\"\n      }}><inlineCode parentName=\"a\">{`Schema.sanitizeAndValidate()`}</inlineCode></a>{` method, that allows you to use async validators and sanitizers on the schema.`}</p>\n    <p><strong parentName=\"p\">{`Note:`}</strong>{` This library has no async validation or sanitization methods itself, but you can add your own.`}</p>\n    <h2 {...{\n      \"id\": \"schemasanitizeandverifyasync\"\n    }}><inlineCode parentName=\"h2\">{`Schema.sanitizeAndVerifyAsync`}</inlineCode></h2>\n    <p>{`This is an async version of the `}<a parentName=\"p\" {...{\n        \"href\": \"#schemasanitizeandverify\"\n      }}><inlineCode parentName=\"a\">{`Schema.sanitizeAndVerify()`}</inlineCode></a>{` method, that allows you to use async validators and sanitizers on the schema.`}</p>\n    <p><strong parentName=\"p\">{`Note:`}</strong>{` This library has no async validation or sanitization methods itself, but you can add your own.`}</p>\n    <h2 {...{\n      \"id\": \"schemaalso\"\n    }}><inlineCode parentName=\"h2\">{`Schema.also`}</inlineCode></h2>\n    <p>{`Connects multiple schemas or attaches a custom validation function to the schema. Have a look at `}<a parentName=\"p\" {...{\n        \"href\": \"#custom-validations\"\n      }}>{`custom validations`}</a>{` for more details.`}</p>\n    <h2 {...{\n      \"id\": \"schemaand\"\n    }}><inlineCode parentName=\"h2\">{`Schema.and`}</inlineCode></h2>\n    <p>{`Logically connects multiple schemas, or a custom validation function to the schema. Have a look at `}<a parentName=\"p\" {...{\n        \"href\": \"#conditional-validations\"\n      }}>{`conditional validations`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"#custom-validations\"\n      }}>{`custom validations`}</a>{` for more details.`}</p>\n    <h2 {...{\n      \"id\": \"schemaor\"\n    }}><inlineCode parentName=\"h2\">{`Schema.or`}</inlineCode></h2>\n    <p>{`Logically connects multiple schemas, or a custom validation function to the schema. Have a look at `}<a parentName=\"p\" {...{\n        \"href\": \"#conditional-validations\"\n      }}>{`conditional validations`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"#custom-validations\"\n      }}>{`custom validations`}</a>{` for more details.`}</p>\n    <h2 {...{\n      \"id\": \"schemamap\"\n    }}><inlineCode parentName=\"h2\">{`Schema.map`}</inlineCode></h2>\n    <p>{`Attaches a custom sanitizer function to the schema. Have a look at `}<a parentName=\"p\" {...{\n        \"href\": \"#custom-sanitizers\"\n      }}>{`custom sanitizers`}</a>{` for more details.`}</p>\n    <h2 {...{\n      \"id\": \"value\"\n    }}><inlineCode parentName=\"h2\">{`value`}</inlineCode></h2>\n    <p>{`This schema is different from the others since it does not provide any validation nor sanitization methods itself. It is a convenient method to define a new schema starting with the default value. Use it as an entry point for any other kind of schema.`}</p>\n    <p>{`Example of a schema where we start by defining the default value first:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { value } from \"@corets/schema\"\n\nconst schema = value(\"foo\").string()\n`}</code></pre>\n    <p>{`The example above is equivalent to this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nconst schema = string().toDefault(\"foo\")\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Note:`}</strong>{` Defining a default value is totally optional, but might be very useful, since you can use the `}<a parentName=\"p\" {...{\n        \"href\": \"#schemasanitize\"\n      }}><inlineCode parentName=\"a\">{`Schema.sanitize`}</inlineCode></a>{` to prefill a value with some default data - think `}<em parentName=\"p\">{`forms`}</em>{`.`}</p>\n    <h2 {...{\n      \"id\": \"valuestring\"\n    }}><inlineCode parentName=\"h2\">{`value.string`}</inlineCode></h2>\n    <p>{`Create a new `}<a parentName=\"p\" {...{\n        \"href\": \"#string\"\n      }}><inlineCode parentName=\"a\">{`string`}</inlineCode></a>{` schema starting with the default value:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { value } from \"@corets/schema\"\n\nvalue(\"foo\").string()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"valuenumber\"\n    }}><inlineCode parentName=\"h2\">{`value.number`}</inlineCode></h2>\n    <p>{`Create a new `}<a parentName=\"p\" {...{\n        \"href\": \"#number\"\n      }}><inlineCode parentName=\"a\">{`number`}</inlineCode></a>{` schema starting with the default value:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { value } from \"@corets/schema\"\n\nvalue(\"foo\").number()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"valueboolean\"\n    }}><inlineCode parentName=\"h2\">{`value.boolean`}</inlineCode></h2>\n    <p>{`Create a new `}<a parentName=\"p\" {...{\n        \"href\": \"#boolean\"\n      }}><inlineCode parentName=\"a\">{`boolean`}</inlineCode></a>{` schema starting with the default value:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { value } from \"@corets/schema\"\n\nvalue(\"foo\").boolean()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"valuedate\"\n    }}><inlineCode parentName=\"h2\">{`value.date`}</inlineCode></h2>\n    <p>{`Create a new `}<a parentName=\"p\" {...{\n        \"href\": \"#date\"\n      }}><inlineCode parentName=\"a\">{`date`}</inlineCode></a>{` schema starting with the default value:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { value } from \"@corets/schema\"\n\nvalue(\"foo\").date()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"valuearray\"\n    }}><inlineCode parentName=\"h2\">{`value.array`}</inlineCode></h2>\n    <p>{`Create a new `}<a parentName=\"p\" {...{\n        \"href\": \"#array\"\n      }}><inlineCode parentName=\"a\">{`array`}</inlineCode></a>{` schema starting with the default value:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { value } from \"@corets/schema\"\n\nvalue(\"foo\").array()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"valueobject\"\n    }}><inlineCode parentName=\"h2\">{`value.object`}</inlineCode></h2>\n    <p>{`Create a new `}<a parentName=\"p\" {...{\n        \"href\": \"#object\"\n      }}><inlineCode parentName=\"a\">{`object`}</inlineCode></a>{` schema starting with the default value:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { value } from \"@corets/schema\"\n\nvalue(\"foo\").object()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"valuemixed\"\n    }}><inlineCode parentName=\"h2\">{`value.mixed`}</inlineCode></h2>\n    <p>{`Create a new `}<a parentName=\"p\" {...{\n        \"href\": \"#mixed\"\n      }}><inlineCode parentName=\"a\">{`mixed`}</inlineCode></a>{` schema starting with the default value:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { value } from \"@corets/schema\"\n\nvalue(\"foo\").mixed()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"string\"\n    }}><inlineCode parentName=\"h2\">{`string`}</inlineCode></h2>\n    <p>{`Contains various validators and sanitizers for strings:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nconst schema = string()\n`}</code></pre>\n    <p>{`Create a schema instance without the factory function:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { StringSchema } from \"@corets/schema\"\n\nconst schema = new StringSchema()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"stringrequired\"\n    }}><inlineCode parentName=\"h2\">{`string.required`}</inlineCode></h2>\n    <p>{`Value must be a non-empty string. Active by default:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nstring().required()\nstring().required(true, \"Message\")\nstring().required(() => true, () => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"stringoptional\"\n    }}><inlineCode parentName=\"h2\">{`string.optional`}</inlineCode></h2>\n    <p>{`Value might be a string, opposite of `}<a parentName=\"p\" {...{\n        \"href\": \"#stringrequired\"\n      }}><inlineCode parentName=\"a\">{`string.required()`}</inlineCode></a>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nstring().optional()\nstring().optional(\"Message\")\nstring().optional(() => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"stringequals\"\n    }}><inlineCode parentName=\"h2\">{`string.equals`}</inlineCode></h2>\n    <p>{`String must be equal to the given value:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nstring().equals(\"foo\")\nstring().equals(\"foo\", \"Message\")\nstring().equals(() => \"foo\", () => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"stringlength\"\n    }}><inlineCode parentName=\"h2\">{`string.length`}</inlineCode></h2>\n    <p>{`String must have an exact length:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nstring().length(3)\nstring().length(3, \"Message\")\nstring().length(() => 3, () => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"stringmin\"\n    }}><inlineCode parentName=\"h2\">{`string.min`}</inlineCode></h2>\n    <p>{`String must not be shorter than given value:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nstring().min(3)\nstring().min(3, \"Message\")\nstring().min(() => 3, () => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"stringmax\"\n    }}><inlineCode parentName=\"h2\">{`string.max`}</inlineCode></h2>\n    <p>{`String must not be longer than given value:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nstring().max(3)\nstring().max(3, \"Message\")\nstring().max(() => 3, () => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"stringbetween\"\n    }}><inlineCode parentName=\"h2\">{`string.between`}</inlineCode></h2>\n    <p>{`String must have a length between min and max:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nstring().between(3, 6)\nstring().between(3, 6, \"Message\")\nstring().between(() => 3, () => 6, () => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"stringmatches\"\n    }}><inlineCode parentName=\"h2\">{`string.matches`}</inlineCode></h2>\n    <p>{`String must match given RegExp:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nstring().matches(/^red/)\nstring().matches(/^red/, \"Message\")\nstring().matches(() => /^red/, () => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"stringemail\"\n    }}><inlineCode parentName=\"h2\">{`string.email`}</inlineCode></h2>\n    <p>{`String must be a valid email address:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nstring().email()\nstring().email(\"Message\")\nstring().email(() => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"stringurl\"\n    }}><inlineCode parentName=\"h2\">{`string.url`}</inlineCode></h2>\n    <p>{`String must be a valid URL:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nstring().url()\nstring().url(\"Message\")\nstring().url(() => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"stringstartswith\"\n    }}><inlineCode parentName=\"h2\">{`string.startsWith`}</inlineCode></h2>\n    <p>{`String must start with a given value:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nstring().startsWith(\"foo\")\nstring().startsWith(\"foo\", \"Message\")\nstring().startsWith(() => \"foo\", () => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"stringendswith\"\n    }}><inlineCode parentName=\"h2\">{`string.endsWith`}</inlineCode></h2>\n    <p>{`String must end with a given value:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nstring().endsWith(\"foo\")\nstring().endsWith(\"foo\", \"Message\")\nstring().endsWith(() => \"foo\", () => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"stringincludes\"\n    }}><inlineCode parentName=\"h2\">{`string.includes`}</inlineCode></h2>\n    <p>{`String must include a given substring:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nstring().includes(\"foo\")\nstring().includes(\"foo\", \"Message\")\nstring().includes(() => \"foo\", () => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"stringomits\"\n    }}><inlineCode parentName=\"h2\">{`string.omits`}</inlineCode></h2>\n    <p>{`String must not include a given substring:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nstring().omits(\"foo\")\nstring().omits(\"foo\", \"Message\")\nstring().omits(() => \"foo\", () => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"stringoneof\"\n    }}><inlineCode parentName=\"h2\">{`string.oneOf`}</inlineCode></h2>\n    <p>{`String must be one of the whitelisted values:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nstring().oneOf([\"foo\", \"bar\"])\nstring().oneOf([\"foo\", \"bar\"], \"Message\")\nstring().oneOf(() => [\"foo\", \"bar\"], () => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"stringnoneof\"\n    }}><inlineCode parentName=\"h2\">{`string.noneOf`}</inlineCode></h2>\n    <p>{`String must not be one of the blacklisted values:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nstring().noneOf([\"foo\", \"bar\"])\nstring().noneOf([\"foo\", \"bar\"], \"Message\")\nstring().noneOf(() => [\"foo\", \"bar\"], () => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"stringnumeric\"\n    }}><inlineCode parentName=\"h2\">{`string.numeric`}</inlineCode></h2>\n    <p>{`String must contain numbers only, including floats:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nstring().numeric()\nstring().numeric(\"Message\")\nstring().numeric(() => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"stringalpha\"\n    }}><inlineCode parentName=\"h2\">{`string.alpha`}</inlineCode></h2>\n    <p>{`String must contain letters only:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nstring().alpha()\nstring().alpha(\"Message\")\nstring().alpha(() => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"stringalphanumeric\"\n    }}><inlineCode parentName=\"h2\">{`string.alphaNumeric`}</inlineCode></h2>\n    <p>{`String must contain numbers and letters only:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nstring().alphaNumeric()\nstring().alphaNumeric(\"Message\")\nstring().alphaNumeric(() => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"stringalphadashes\"\n    }}><inlineCode parentName=\"h2\">{`string.alphaDashes`}</inlineCode></h2>\n    <p>{`String must contain letters and dashes `}<inlineCode parentName=\"p\">{`-`}</inlineCode>{` only:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nstring().alphaDashes()\nstring().alphaDashes(\"Message\")\nstring().alphaDashes(() => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"stringalphaunderscores\"\n    }}><inlineCode parentName=\"h2\">{`string.alphaUnderscores`}</inlineCode></h2>\n    <p>{`String must contain letters and underscores `}<inlineCode parentName=\"p\">{`_`}</inlineCode>{` only:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nstring().alphaUnderscores()\nstring().alphaUnderscores(\"Message\")\nstring().alphaUnderscores(() => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"stringalphanumericdashes\"\n    }}><inlineCode parentName=\"h2\">{`string.alphaNumericDashes`}</inlineCode></h2>\n    <p>{`String must contain letters, numbers and dashes only:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nstring().alphaNumericDashes()\nstring().alphaNumericDashes(\"Message\")\nstring().alphaNumericDashes(() => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"stringalphanumericunderscores\"\n    }}><inlineCode parentName=\"h2\">{`string.alphaNumericUnderscores`}</inlineCode></h2>\n    <p>{`String must contain letters, numbers and underscores only:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nstring().alphaNumericUnderscores()\nstring().alphaNumericUnderscores(\"Message\")\nstring().alphaNumericUnderscores(() => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"stringdate\"\n    }}><inlineCode parentName=\"h2\">{`string.date`}</inlineCode></h2>\n    <p>{`String must be a valid ISO date string:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nstring().date()\nstring().date(\"Message\")\nstring().date(() => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"stringdatebefore\"\n    }}><inlineCode parentName=\"h2\">{`string.dateBefore`}</inlineCode></h2>\n    <p>{`String must be a valid ISO date string before the given date:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nstring().dateBefore(new Date())\nstring().dateBefore(new Date(), \"Message\")\nstring().dateBefore(() => new Date(), () => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"stringdatebeforeorsame\"\n    }}><inlineCode parentName=\"h2\">{`string.dateBeforeOrSame`}</inlineCode></h2>\n    <p>{`Similar to `}<a parentName=\"p\" {...{\n        \"href\": \"#stringdatebefore\"\n      }}><inlineCode parentName=\"a\">{`string.dateBefore()`}</inlineCode></a>{`, but allows dates to be equal:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nstring().dateBeforeOrSame(new Date())\nstring().dateBeforeOrSame(new Date(), \"Message\")\nstring().dateBeforeOrSame(() => new Date(), () => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"stringdateafter\"\n    }}><inlineCode parentName=\"h2\">{`string.dateAfter`}</inlineCode></h2>\n    <p>{`String must be a valid ISO date string after the given date:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nstring().dateAfter(new Date())\nstring().dateAfter(new Date(), \"Message\")\nstring().dateAfter(() => new Date(), () => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"stringdateafterorsame\"\n    }}><inlineCode parentName=\"h2\">{`string.dateAfterOrSame`}</inlineCode></h2>\n    <p>{`Similar to `}<a parentName=\"p\" {...{\n        \"href\": \"#stringdateafter\"\n      }}><inlineCode parentName=\"a\">{`string.dateAfter()`}</inlineCode></a>{`, but allows dates to be equal:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nstring().dateAfterOrSame(new Date())\nstring().dateAfterOrSame(new Date(), \"Message\")\nstring().dateAfterOrSame(() => new Date(), () => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"stringdatebetween\"\n    }}><inlineCode parentName=\"h2\">{`string.dateBetween`}</inlineCode></h2>\n    <p>{`String must be a valid ISO date string between the two given dates:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nstring().dateBetween(new Date(), new Date())\nstring().dateBetween(new Date(), new Date(), \"Message\")\nstring().dateBetween(() => new Date(), () => new Date(), () => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"stringdatebetweenorsame\"\n    }}><inlineCode parentName=\"h2\">{`string.dateBetweenOrSame`}</inlineCode></h2>\n    <p>{`Similar to `}<a parentName=\"p\" {...{\n        \"href\": \"#stringdatebetween\"\n      }}><inlineCode parentName=\"a\">{`string.dateBetween()`}</inlineCode></a>{`, but allows dates to be equal:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nstring().dateBetweenOrSame(new Date(), new Date())\nstring().dateBetweenOrSame(new Date(), new Date(), \"Message\")\nstring().dateBetweenOrSame(() => new Date(), () => new Date(), () => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"stringtime\"\n    }}><inlineCode parentName=\"h2\">{`string.time`}</inlineCode></h2>\n    <p>{`String must be a valid ISO time string:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nstring().time()\nstring().time(\"Message\")\nstring().time(() => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"stringtimebefore\"\n    }}><inlineCode parentName=\"h2\">{`string.timeBefore`}</inlineCode></h2>\n    <p>{`String must be a valid ISO time string before the given time:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nstring().timeBefore(\"10:00\")\nstring().timeBefore(\"10:00\", \"Message\")\nstring().timeBefore(() => \"10:00\", () => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"stringtimebeforeorsame\"\n    }}><inlineCode parentName=\"h2\">{`string.timeBeforeOrSame`}</inlineCode></h2>\n    <p>{`Similar to `}<a parentName=\"p\" {...{\n        \"href\": \"#stringtimebefore\"\n      }}><inlineCode parentName=\"a\">{`string.timeBefore()`}</inlineCode></a>{`, but allows times to be equal:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nstring().timeBeforeOrSame(\"10:00\")\nstring().timeBeforeOrSame(\"10:00\", \"Message\")\nstring().timeBeforeOrSame(() => \"10:00\", () => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"stringtimeafter\"\n    }}><inlineCode parentName=\"h2\">{`string.timeAfter`}</inlineCode></h2>\n    <p>{`String must be a valid ISO time string after the given time:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nstring().timeAfter(\"10:00\")\nstring().timeAfter(\"10:00\", \"Message\")\nstring().timeAfter(() => \"10:00\", () => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"stringtimeafterorsame\"\n    }}><inlineCode parentName=\"h2\">{`string.timeAfterOrSame`}</inlineCode></h2>\n    <p>{`Similar to `}<a parentName=\"p\" {...{\n        \"href\": \"#stringtimeafter\"\n      }}><inlineCode parentName=\"a\">{`string.timeAfter()`}</inlineCode></a>{`, but allows times to be equal:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nstring().timeAfterOrSame(\"10:00\")\nstring().timeAfterOrSame(\"10:00\", \"Message\")\nstring().timeAfterOrSame(() => \"10:00\", () => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"stringtimebetween\"\n    }}><inlineCode parentName=\"h2\">{`string.timeBetween`}</inlineCode></h2>\n    <p>{`String must be a valid ISO time string between the two given times:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nstring().timeBetween(\"10:00\", \"15:00\")\nstring().timeBetween(\"10:00\", \"15:00\", \"Message\")\nstring().timeBetween(() => \"10:00\", () => \"15:00\", () => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"stringtimebetweenorsame\"\n    }}><inlineCode parentName=\"h2\">{`string.timeBetweenOrSame`}</inlineCode></h2>\n    <p>{`Similar to `}<a parentName=\"p\" {...{\n        \"href\": \"#stringtimebetween\"\n      }}><inlineCode parentName=\"a\">{`string.timeBetween()`}</inlineCode></a>{`, but allows dates to be equal:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nstring().dateBetweenOrSame(new Date(), new Date())\nstring().dateBetweenOrSame(new Date(), new Date(), \"Message\")\nstring().dateBetweenOrSame(() => new Date(), () => new Date(), () => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"stringdatetime\"\n    }}><inlineCode parentName=\"h2\">{`string.dateTime`}</inlineCode></h2>\n    <p>{`String must be a valid ISO date time string:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nstring().dateTime()\nstring().dateTime(\"Message\")\nstring().dateTime(() => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"stringtodefault\"\n    }}><inlineCode parentName=\"h2\">{`string.toDefault`}</inlineCode></h2>\n    <p>{`Provide a fallback value in case the underlying value is not a string:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nstring().toDefault(\"default value\")\nstring().toDefault(\"default value\")\nstring().toDefault(() => \"default value\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"stringtouppercase\"\n    }}><inlineCode parentName=\"h2\">{`string.toUpperCase`}</inlineCode></h2>\n    <p>{`Convert string to all upper case:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nstring().toUpperCase()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"stringtolowercase\"\n    }}><inlineCode parentName=\"h2\">{`string.toLowerCase`}</inlineCode></h2>\n    <p>{`Convert string to all lower case:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nstring().toLowerCase()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"stringtocapitalized\"\n    }}><inlineCode parentName=\"h2\">{`string.toCapitalized`}</inlineCode></h2>\n    <p>{`Capitalize first letter:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nstring().toCapitalized()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"stringtocamelcase\"\n    }}><inlineCode parentName=\"h2\">{`string.toCamelCase`}</inlineCode></h2>\n    <p>{`Convert string to `}<inlineCode parentName=\"p\">{`camelCase`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nstring().toCamelCase()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"stringtosnakecase\"\n    }}><inlineCode parentName=\"h2\">{`string.toSnakeCase`}</inlineCode></h2>\n    <p>{`Convert string to `}<inlineCode parentName=\"p\">{`snake_case`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nstring().toSnakeCase()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"stringtokebabcase\"\n    }}><inlineCode parentName=\"h2\">{`string.toKebabCase`}</inlineCode></h2>\n    <p>{`Convert string to `}<inlineCode parentName=\"p\">{`kebab-case`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nstring().toKebabCase()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"stringtoconstantcase\"\n    }}><inlineCode parentName=\"h2\">{`string.toConstantCase`}</inlineCode></h2>\n    <p>{`Convert string to `}<inlineCode parentName=\"p\">{`CONSTANT_CASE`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nstring().toConstantCase()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"stringtotrimmed\"\n    }}><inlineCode parentName=\"h2\">{`string.toTrimmed`}</inlineCode></h2>\n    <p>{`Trim surrounding white space:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { string } from \"@corets/schema\"\n\nstring().toTrimmed()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"number\"\n    }}><inlineCode parentName=\"h2\">{`number`}</inlineCode></h2>\n    <p>{`Contains various validators and sanitizers for numbers:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { number } from \"@corets/schema\"\n\nconst schema = number()\n`}</code></pre>\n    <p>{`Create a schema instance without the factory function:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { NumberSchema } from \"@corets/schema\"\n\nconst schema = new NumberSchema()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"numberrequired\"\n    }}><inlineCode parentName=\"h2\">{`number.required`}</inlineCode></h2>\n    <p>{`Value must be a number:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { number } from \"@corets/schema\"\n\nnumber().required()\nnumber().required(\"Message\")\nnumber().required(() => false, () => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"numberoptional\"\n    }}><inlineCode parentName=\"h2\">{`number.optional`}</inlineCode></h2>\n    <p>{`Value might be a number, opposite of `}<a parentName=\"p\" {...{\n        \"href\": \"#numberrequired\"\n      }}><inlineCode parentName=\"a\">{`number.required()`}</inlineCode></a>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { number } from \"@corets/schema\"\n\nnumber().optional()\nnumber().optional(\"Message\")\nnumber().optional(() => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"numberequals\"\n    }}><inlineCode parentName=\"h2\">{`number.equals`}</inlineCode></h2>\n    <p>{`Number must be equal to the given value:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { number } from \"@corets/schema\"\n\nnumber().equals(3)\nnumber().equals(3, \"Message\")\nnumber().equals(() => 3, () => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"numbermin\"\n    }}><inlineCode parentName=\"h2\">{`number.min`}</inlineCode></h2>\n    <p>{`Number must not be smaller than the given value:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { number } from \"@corets/schema\"\n\nnumber().min(5)\nnumber().min(5, \"Message\")\nnumber().min(() => 5, () => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"numbermax\"\n    }}><inlineCode parentName=\"h2\">{`number.max`}</inlineCode></h2>\n    <p>{`Number must not be bigger than the given value:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { number } from \"@corets/schema\"\n\nnumber().max(10)\nnumber().max(10, \"Message\")\nnumber().max(() => 10, () => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"numberbetween\"\n    }}><inlineCode parentName=\"h2\">{`number.between`}</inlineCode></h2>\n    <p>{`Number must be between the two given numbers:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { number } from \"@corets/schema\"\n\nnumber().between(5, 10)\nnumber().between(5, 10, \"Message\")\nnumber().between(() => 5, () => 10, () => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"numberbetween-1\"\n    }}><inlineCode parentName=\"h2\">{`number.between`}</inlineCode></h2>\n    <p>{`Number must be positive - bigger than zero:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { number } from \"@corets/schema\"\n\nnumber().positive()\nnumber().positive(\"Message\")\nnumber().positive(() => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"numbernegative\"\n    }}><inlineCode parentName=\"h2\">{`number.negative`}</inlineCode></h2>\n    <p>{`Number must be negative - smaller than zero:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { number } from \"@corets/schema\"\n\nnumber().negative()\nnumber().negative(\"Message\")\nnumber().negative(() => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"numberinteger\"\n    }}><inlineCode parentName=\"h2\">{`number.integer`}</inlineCode></h2>\n    <p>{`Number must be an integer - no floats:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { number } from \"@corets/schema\"\n\nnumber().integer()\nnumber().integer(\"Message\")\nnumber().integer(() => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"numbertodefault\"\n    }}><inlineCode parentName=\"h2\">{`number.toDefault`}</inlineCode></h2>\n    <p>{`Default value in case the underlying value is not a number:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { number } from \"@corets/schema\"\n\nnumber().toDefault(10)\nnumber().toDefault(() => 10)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"numbertorounded\"\n    }}><inlineCode parentName=\"h2\">{`number.toRounded`}</inlineCode></h2>\n    <p>{`Round value using `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round\"\n      }}><inlineCode parentName=\"a\">{`Math.round()`}</inlineCode></a>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { number } from \"@corets/schema\"\n\nnumber().toRounded(2)\nnumber().toRounded(() => 2)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"numbertofloored\"\n    }}><inlineCode parentName=\"h2\">{`number.toFloored`}</inlineCode></h2>\n    <p>{`Round value using `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor\"\n      }}><inlineCode parentName=\"a\">{`Math.floor()`}</inlineCode></a>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { number } from \"@corets/schema\"\n\nnumber().toFloored()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"numbertoceiled\"\n    }}><inlineCode parentName=\"h2\">{`number.toCeiled`}</inlineCode></h2>\n    <p>{`Round value using `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil\"\n      }}><inlineCode parentName=\"a\">{`Math.ceil()`}</inlineCode></a>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { number } from \"@corets/schema\"\n\nnumber().toCeiled()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"numbertotrunced\"\n    }}><inlineCode parentName=\"h2\">{`number.toTrunced`}</inlineCode></h2>\n    <p>{`Trunc value using `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc\"\n      }}><inlineCode parentName=\"a\">{`Math.trunc()`}</inlineCode></a>{`. Drops everything after the decimal point:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { number } from \"@corets/schema\"\n\nnumber().toTrunced()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"boolean\"\n    }}><inlineCode parentName=\"h2\">{`boolean`}</inlineCode></h2>\n    <p>{`Contains various validators and sanitizers for booleans:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { boolean } from \"@corets/schema\"\n\nconst schema = boolean()\n`}</code></pre>\n    <p>{`Create a schema instance without the factory function:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { BooleanSchema } from \"@corets/schema\"\n\nconst schema = new BooleanSchema()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"booleanrequired\"\n    }}><inlineCode parentName=\"h2\">{`boolean.required`}</inlineCode></h2>\n    <p>{`Value must be a boolean:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { boolean } from \"@corets/schema\"\n\nboolean().required()\nboolean().required(false, \"Message\")\nboolean().required(() => false, () =>\"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"booleanoptional\"\n    }}><inlineCode parentName=\"h2\">{`boolean.optional`}</inlineCode></h2>\n    <p>{`Value might be a boolean, opposite of `}<a parentName=\"p\" {...{\n        \"href\": \"#booleanrequired\"\n      }}><inlineCode parentName=\"a\">{`boolean.required()`}</inlineCode></a>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { boolean } from \"@corets/schema\"\n\nboolean().optional()\nboolean().optional(\"Message\")\nboolean().optional(() => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"booleanequals\"\n    }}><inlineCode parentName=\"h2\">{`boolean.equals`}</inlineCode></h2>\n    <p>{`Number must be equal to the given value:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { boolean } from \"@corets/schema\"\n\nboolean().equals(true)\nboolean().equals(true, \"Message\")\nboolean().equals(() => true, () => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"booleantodefault\"\n    }}><inlineCode parentName=\"h2\">{`boolean.toDefault`}</inlineCode></h2>\n    <p>{`Provide a fallback value in case the underlying value is not a boolean:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { boolean } from \"@corets/schema\"\n\nboolean().toDefault(true)\nboolean().toDefault(() => true)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"date\"\n    }}><inlineCode parentName=\"h2\">{`date`}</inlineCode></h2>\n    <p>{`Contains various validators and sanitizers for dates:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { date } from \"@corets/schema\"\n\nconst schema = date()\n`}</code></pre>\n    <p>{`Create a schema instance without the factory function:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { DateSchema } from \"@corets/schema\"\n\nconst schema = new DateSchema()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"daterequired\"\n    }}><inlineCode parentName=\"h2\">{`date.required`}</inlineCode></h2>\n    <p>{`Value must be a date:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { date } from \"@corets/schema\"\n\ndate().required()\ndate().required(false, \"Message\")\ndate().required(() => false, () => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"dateoptional\"\n    }}><inlineCode parentName=\"h2\">{`date.optional`}</inlineCode></h2>\n    <p>{`Value might be a date, opposite of `}<a parentName=\"p\" {...{\n        \"href\": \"#daterequired\"\n      }}><inlineCode parentName=\"a\">{`date.required()`}</inlineCode></a>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { date } from \"@corets/schema\"\n\ndate().optional()\ndate().optional(\"Message\")\ndate().optional(() => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"dateequals\"\n    }}><inlineCode parentName=\"h2\">{`date.equals`}</inlineCode></h2>\n    <p>{`Date must be equal to the given value:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { date } from \"@corets/schema\"\n\ndate().equals(new Date())\ndate().equals(new Date(), \"Message\")\ndate().equals(() => new Date(), () => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"dateafter\"\n    }}><inlineCode parentName=\"h2\">{`date.after`}</inlineCode></h2>\n    <p>{`Underlying value must be after the given date:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { date } from \"@corets/schema\"\n\ndate().after(new Date())\ndate().after(new Date(), \"Message\")\ndate().after(() => new Date(), () => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"datebefore\"\n    }}><inlineCode parentName=\"h2\">{`date.before`}</inlineCode></h2>\n    <p>{`Underlying value must be before the given date:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { date } from \"@corets/schema\"\n\ndate().before(new Date())\ndate().before(new Date(), \"Message\")\ndate().before(() => new Date(), () => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"datebetween\"\n    }}><inlineCode parentName=\"h2\">{`date.between`}</inlineCode></h2>\n    <p>{`Underlying value must be between the two dates:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { date } from \"@corets/schema\"\n\ndate().between(new Date(), new Date())\ndate().between(new Date(), new Date(), \"Message\")\ndate().between(() => new Date(), () => new Date(), () => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"datetodefault\"\n    }}><inlineCode parentName=\"h2\">{`date.toDefault`}</inlineCode></h2>\n    <p>{`Provide a fallback value in case the underlying value is not a date:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { date } from \"@corets/schema\"\n\ndate().toDefault(new Date())\ndate().toDefault(new Date(), \"Message\")\ndate().toDefault(() => new Date(), () => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"array\"\n    }}><inlineCode parentName=\"h2\">{`array`}</inlineCode></h2>\n    <p>{`Contains various validators and sanitizers for arrays:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { array, string } from \"@corets/schema\"\n\nconst schema = array()\n`}</code></pre>\n    <p>{`Create a schema instance without the factory function:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { ArraySchema } from \"@corets/schema\"\n\nconst schema = new ArraySchema()\n`}</code></pre>\n    <p>{`Define a schema for array children:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { array, string } from \"@corets/schema\"\n\nconst schema = array(\n  string().min(2)\n)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"arrayrequired\"\n    }}><inlineCode parentName=\"h2\">{`array.required`}</inlineCode></h2>\n    <p>{`Value must be an array:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { array } from \"@corets/schema\"\n\narray().required()\narray().required(false, \"Message\")\narray().required(() => false, () => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"arrayoptional\"\n    }}><inlineCode parentName=\"h2\">{`array.optional`}</inlineCode></h2>\n    <p>{`Value might be a array, opposite of `}<a parentName=\"p\" {...{\n        \"href\": \"#arrayrequired\"\n      }}><inlineCode parentName=\"a\">{`array.required()`}</inlineCode></a>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { array } from \"@corets/schema\"\n\narray().optional()\narray().optional(\"Message\")\narray().optional(() => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"arrayequals\"\n    }}><inlineCode parentName=\"h2\">{`array.equals`}</inlineCode></h2>\n    <p>{`Array must be equal to the given value:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { array } from \"@corets/schema\"\n\narray().equals([1, 2])\narray().equals([1, 2], \"Message\")\narray().equals(() => [1, 2], () => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"arraylength\"\n    }}><inlineCode parentName=\"h2\">{`array.length`}</inlineCode></h2>\n    <p>{`Array must have an exact length:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { array } from \"@corets/schema\"\n\narray().length(3)\narray().length(3, \"Message\")\narray().length(() => 3, () => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"arraymin\"\n    }}><inlineCode parentName=\"h2\">{`array.min`}</inlineCode></h2>\n    <p>{`Array must not be shorter than the given length:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { array } from \"@corets/schema\"\n\narray().min(3)\narray().min(3, \"Message\")\narray().min(() => 3, () => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"arraymax\"\n    }}><inlineCode parentName=\"h2\">{`array.max`}</inlineCode></h2>\n    <p>{`Array must not be longer than the given length:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { array } from \"@corets/schema\"\n\narray().max(3)\narray().max(3, \"Message\")\narray().max(() => 3, () => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"arraybetween\"\n    }}><inlineCode parentName=\"h2\">{`array.between`}</inlineCode></h2>\n    <p>{`Array must have a length between the two given values:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { array } from \"@corets/schema\"\n\narray().between(3, 5)\narray().between(3, 5, \"Message\")\narray().between(() => 3, () => 5, () => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"arraysomeof\"\n    }}><inlineCode parentName=\"h2\">{`array.someOf`}</inlineCode></h2>\n    <p>{`Array must only contain whitelisted values:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { array } from \"@corets/schema\"\n\narray().someOf([3, 4])\narray().someOf([3, 4], \"Message\")\narray().someOf(() => [3, 4], () => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"arraynoneof\"\n    }}><inlineCode parentName=\"h2\">{`array.noneOf`}</inlineCode></h2>\n    <p>{`Array must not contain any of the blacklisted values:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { array } from \"@corets/schema\"\n\narray().noneOf([3, 4])\narray().noneOf([3, 4], \"Message\")\narray().noneOf(() => [3, 4], () => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"arrayshape\"\n    }}><inlineCode parentName=\"h2\">{`array.shape`}</inlineCode></h2>\n    <p>{`Specify a schema for array items. Every item must be valid according to the schema:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { array, string } from \"@corets/schema\"\n\narray().shape(string().min(3))\narray().shape(() => string().min(3))\n`}</code></pre>\n    <p>{`You can pass a shape directly to the `}<a parentName=\"p\" {...{\n        \"href\": \"#array\"\n      }}><inlineCode parentName=\"a\">{`array()`}</inlineCode></a>{` method too:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { array, string } from \"@corets/schema\"\n\narray(string().min(3))\narray(() => string().min(3))\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"arraytodefault\"\n    }}><inlineCode parentName=\"h2\">{`array.toDefault`}</inlineCode></h2>\n    <p>{`Provide a default value in case the underlying value is not an array:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { array } from \"@corets/schema\"\n\narray().toDefault([1, 2])\narray().toDefault(() => [1, 2])\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"arraytofiltered\"\n    }}><inlineCode parentName=\"h2\">{`array.toFiltered`}</inlineCode></h2>\n    <p>{`Filter out invalid array items manually:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { array } from \"@corets/schema\"\n\nconst isString = (value) => typeof value === \"string\"\n\narray().toFiltered(isString)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"arraytomapped\"\n    }}><inlineCode parentName=\"h2\">{`array.toMapped`}</inlineCode></h2>\n    <p>{`Map every array item manually:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { array } from \"@corets/schema\"\n\nconst toUpperCase = (value) => typeof value === \"string\" ? value.toUpperCase() : value\n\narray().toMapped(toUpperCase)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"arraytocompact\"\n    }}><inlineCode parentName=\"h2\">{`array.toCompact`}</inlineCode></h2>\n    <p>{`Filter out all `}<inlineCode parentName=\"p\">{`falsey`}</inlineCode>{` values like `}<inlineCode parentName=\"p\">{`null`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`undefined`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`\"\"\"`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`0`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { array } from \"@corets/schema\"\n\narray().toCompact()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"arraytounique\"\n    }}><inlineCode parentName=\"h2\">{`array.toUnique`}</inlineCode></h2>\n    <p>{`Filter out all duplicate values:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { array } from \"@corets/schema\"\n\narray().toUnique()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"object\"\n    }}><inlineCode parentName=\"h2\">{`object`}</inlineCode></h2>\n    <p>{`Contains various validators and sanitizers for objects:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { object, string } from \"@corets/schema\"\n\nconst schema = object()\n`}</code></pre>\n    <p>{`Create a schema instance without the factory function:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { ObjectSchema } from \"@corets/schema\"\n\nconst schema = new ObjectSchema()\n`}</code></pre>\n    <p>{`Define a schema for each object property:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { object, string } from \"@corets/schema\"\n\nobject({\n  foo: string().min(2)\n})\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"objectrequired\"\n    }}><inlineCode parentName=\"h2\">{`object.required`}</inlineCode></h2>\n    <p>{`Value must be an object:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { object } from \"@corets/schema\"\n\nobject().required()\nobject().required(false, \"Message\")\nobject().required(() => false, () => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"objectoptional\"\n    }}><inlineCode parentName=\"h2\">{`object.optional`}</inlineCode></h2>\n    <p>{`Value might be an object, opposite of `}<a parentName=\"p\" {...{\n        \"href\": \"#objectrequired\"\n      }}><inlineCode parentName=\"a\">{`object.required()`}</inlineCode></a>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { object } from \"@corets/schema\"\n\nobject().optional()\nobject().optional(\"Message\")\nobject().optional(() => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"objectequals\"\n    }}><inlineCode parentName=\"h2\">{`object.equals`}</inlineCode></h2>\n    <p>{`Underlying value must be equal to the given value:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { object } from \"@corets/schema\"\n\nobject().equals({foo: \"bar\"})\nobject().equals({foo: \"bar\"}, \"Message\")\nobject().equals(() => {foo: \"bar\"}, () => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"objectshape\"\n    }}><inlineCode parentName=\"h2\">{`object.shape`}</inlineCode></h2>\n    <p>{`Shape an object and set up schemas for all of its properties:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { object, string } from \"@corets/schema\"\n\nobject().shape({ firstName: string().min(3).max(20) })\n`}</code></pre>\n    <p>{`You can pass a shape directly to the `}<a parentName=\"p\" {...{\n        \"href\": \"#object\"\n      }}><inlineCode parentName=\"a\">{`object()`}</inlineCode></a>{` method too:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { object, string } from \"@corets/schema\"\n\nobject({ firstName: string().min(3).max(20) })\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"objectallowunknownkeys\"\n    }}><inlineCode parentName=\"h2\">{`object.allowUnknownKeys`}</inlineCode></h2>\n    <p>{`Allow object to contain keys that have not been configured through `}<a parentName=\"p\" {...{\n        \"href\": \"#objectshape\"\n      }}><inlineCode parentName=\"a\">{`object.shape()`}</inlineCode></a>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { object, string } from \"@corets/schema\"\n\nobject()\n  .shape({ firstName: string().min(3).max(20) })\n  .allowUnknownKeys()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"objectdisallowunknownkeys\"\n    }}><inlineCode parentName=\"h2\">{`object.disallowUnknownKeys`}</inlineCode></h2>\n    <p>{`Forbid object to contain keys that have not been configured through `}<a parentName=\"p\" {...{\n        \"href\": \"#objectshape\"\n      }}><inlineCode parentName=\"a\">{`object.shape()`}</inlineCode></a>{`, active by default:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { object, string } from \"@corets/schema\"\n\nobject()\n  .shape({ firstName: string().min(3).max(20) })\n  .disallowUnknownKeys()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"objectshapeunknownkeys\"\n    }}><inlineCode parentName=\"h2\">{`object.shapeUnknownKeys`}</inlineCode></h2>\n    <p>{`Shape unknown object keys to make sure they adhere to a certain format:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { object, string } from \"@corets/schema\"\n\nobject()\n  .shape({ firstName: string().min(3).max(20) })\n  .shapeUnknownKeys(string().min(3).toCamelCase())\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"objectshapeunknownvalues\"\n    }}><inlineCode parentName=\"h2\">{`object.shapeUnknownValues`}</inlineCode></h2>\n    <p>{`Shape unknown object values to make sure they adhere to a format:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { object, string } from \"@corets/schema\"\n\nobject()\n  .shape({ firstName: string().min(3).max(20) })\n  .shapeUnknownValues(string().min(3).max(20))\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"objecttodefault\"\n    }}><inlineCode parentName=\"h2\">{`object.toDefault`}</inlineCode></h2>\n    <p>{`Provide a fallback value in case the underlying value is not an object:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { object } from \"@corets/schema\"\n\nobject().toDefault({title: \"Foo\"})\nobject().toDefault(() => ({title: \"Foo\"}))\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"objecttocamelcasekeys\"\n    }}><inlineCode parentName=\"h2\">{`object.toCamelCaseKeys`}</inlineCode></h2>\n    <p>{`Transform all object keys to `}<inlineCode parentName=\"p\">{`camelCase`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { object } from \"@corets/schema\"\n\nobject().toCamelCaseKeys()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"objecttocamelcasekeysdeep\"\n    }}><inlineCode parentName=\"h2\">{`object.toCamelCaseKeysDeep`}</inlineCode></h2>\n    <p>{`Transform all object keys deeply to `}<inlineCode parentName=\"p\">{`camelCase`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { object } from \"@corets/schema\"\n\nobject().toCamelCaseKeysDeep()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"objecttosnakecasekeys\"\n    }}><inlineCode parentName=\"h2\">{`object.toSnakeCaseKeys`}</inlineCode></h2>\n    <p>{`Transform all object keys to `}<inlineCode parentName=\"p\">{`snake_case`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { object } from \"@corets/schema\"\n\nobject().toSnakeCaseKeys()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"objecttosnakecasekeysdeep\"\n    }}><inlineCode parentName=\"h2\">{`object.toSnakeCaseKeysDeep`}</inlineCode></h2>\n    <p>{`Transform all object keys deeply to `}<inlineCode parentName=\"p\">{`snake_case`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { object } from \"@corets/schema\"\n\nobject().toSnakeCaseKeysDeep()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"objecttokebabcasekeys\"\n    }}><inlineCode parentName=\"h2\">{`object.toKebabCaseKeys`}</inlineCode></h2>\n    <p>{`Transform all object keys to `}<inlineCode parentName=\"p\">{`kebab-case`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { object } from \"@corets/schema\"\n\nobject().toKebabCaseKeys()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"objecttokebabcasekeysdeep\"\n    }}><inlineCode parentName=\"h2\">{`object.toKebabCaseKeysDeep`}</inlineCode></h2>\n    <p>{`Transform all object keys deeply to `}<inlineCode parentName=\"p\">{`kebab-case`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { object } from \"@corets/schema\"\n\nobject().toKebabCaseKeysDeep()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"objecttoconstantcasekeys\"\n    }}><inlineCode parentName=\"h2\">{`object.toConstantCaseKeys`}</inlineCode></h2>\n    <p>{`Transform all object keys to `}<inlineCode parentName=\"p\">{`CONSTANT_CASE`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { object } from \"@corets/schema\"\n\nobject().toConstantCaseKeys()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"objecttoconstantcasekeysdeep\"\n    }}><inlineCode parentName=\"h2\">{`object.toConstantCaseKeysDeep`}</inlineCode></h2>\n    <p>{`Transform all object keys deeply to `}<inlineCode parentName=\"p\">{`CONSTANT_CASE`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { object } from \"@corets/schema\"\n\nobject().toConstantCaseKeysDeep()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"objecttomappedvalues\"\n    }}><inlineCode parentName=\"h2\">{`object.toMappedValues`}</inlineCode></h2>\n    <p>{`Transform all object values:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { object } from \"@corets/schema\"\n\nobject().toMappedValues((value, key) => value)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"objecttomappedvaluesdeep\"\n    }}><inlineCode parentName=\"h2\">{`object.toMappedValuesDeep`}</inlineCode></h2>\n    <p>{`Transform all object values deeply:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { object } from \"@corets/schema\"\n\nobject().toMappedValuesDeep((value, key) => value)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"objecttomappedkeys\"\n    }}><inlineCode parentName=\"h2\">{`object.toMappedKeys`}</inlineCode></h2>\n    <p>{`Transform all object keys:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { object } from \"@corets/schema\"\n\nobject().toMappedKeys((value, key) => key)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"objecttomappedkeysdeep\"\n    }}><inlineCode parentName=\"h2\">{`object.toMappedKeysDeep`}</inlineCode></h2>\n    <p>{`Transform all object keys deeply:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { object } from \"@corets/schema\"\n\nobject().toMappedKeysDeep((value, key) => key)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"mixed\"\n    }}><inlineCode parentName=\"h2\">{`mixed`}</inlineCode></h2>\n    <p>{`Contains various validators and sanitizers for mixed data types:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { mixed } from \"@corets/schema\"\n\nconst schema = mixed()\n`}</code></pre>\n    <p>{`Create a schema instance without the factory function:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { MixedSchema } from \"@corets/schema\"\n\nconst schema = new MixedSchema()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"mixedrequired\"\n    }}><inlineCode parentName=\"h2\">{`mixed.required`}</inlineCode></h2>\n    <p>{`Value must not be `}<inlineCode parentName=\"p\">{`null`}</inlineCode>{` nor `}<inlineCode parentName=\"p\">{`undefined`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { mixed } from \"@corets/schema\"\n\nmixed().required()\nmixed().required(false, \"Message\")\nmixed().required(() => false, () => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"mixedoptional\"\n    }}><inlineCode parentName=\"h2\">{`mixed.optional`}</inlineCode></h2>\n    <p>{`Value might als be a `}<inlineCode parentName=\"p\">{`null`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`undefined`}</inlineCode>{`, opposite of `}<a parentName=\"p\" {...{\n        \"href\": \"#mixedrequired\"\n      }}><inlineCode parentName=\"a\">{`mixed.required()`}</inlineCode></a>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { mixed } from \"@corets/schema\"\n\nmixed().optional()\nmixed().optional(\"Message\")\nmixed().optional(() => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"mixedequals\"\n    }}><inlineCode parentName=\"h2\">{`mixed.equals`}</inlineCode></h2>\n    <p>{`Underlying value must be equal to the given value:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { mixed } from \"@corets/schema\"\n\nmixed().equals(\"yolo\")\nmixed().equals(\"yolo\", \"Message\")\nmixed().equals(() => \"yolo\", () => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"mixedoneof\"\n    }}><inlineCode parentName=\"h2\">{`mixed.oneOf`}</inlineCode></h2>\n    <p>{`Underlying value must be one of the whitelisted values:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { mixed } from \"@corets/schema\"\n\nmixed().oneOf([\"foo\", \"bar\"])\nmixed().oneOf([\"foo\", \"bar\"], \"Message\")\nmixed().oneOf(() => [\"foo\", \"bar\"], () => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"mixednoneof\"\n    }}><inlineCode parentName=\"h2\">{`mixed.noneOf`}</inlineCode></h2>\n    <p>{`Underlying value must not be one of the blacklisted values:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { mixed } from \"@corets/schema\"\n\nmixed().noneOf([\"foo\", \"bar\"])\nmixed().noneOf([\"foo\", \"bar\"], \"Message\")\nmixed().noneOf(() => [\"foo\", \"bar\"], () => \"Message\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"mixedtodefault\"\n    }}><inlineCode parentName=\"h2\">{`mixed.toDefault`}</inlineCode></h2>\n    <p>{`Provide a fallback value in case the underlying value is a `}<inlineCode parentName=\"p\">{`null`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`undefined`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { mixed } from \"@corets/schema\"\n\nmixed().toDefault(\"foo\")\nmixed().toDefault(\"foo\", \"Message\")\nmixed().toDefault(() => \"foo\", () => \"Message\")\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}