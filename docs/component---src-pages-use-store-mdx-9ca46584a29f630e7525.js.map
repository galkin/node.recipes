{"version":3,"sources":["webpack:///../src/pages/use-store.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"wPAQaA,G,UAAe,S,yMAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,aADR,aAGA,oEAAmD,6BAAGC,WAAW,KAAQ,CACrE,KAAQ,WADuC,iBAAnD,KAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,iCAIL,iBAAQ,CACN,GAAM,YACL,0BAAYA,WAAW,MAAvB,aACH,uEACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,se,uMAyBTJ,EAAWK,gBAAiB","file":"component---src-pages-use-store-mdx-9ca46584a29f630e7525.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/mkt/Development/corets/corets/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"use-store\"\n    }}>{`Use Store`}</h1>\n    <p>{`This package provides React integration for `}<a parentName=\"p\" {...{\n        \"href\": \"/store\"\n      }}>{`@corets/store`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn add @corets/use-store\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"usestore\"\n    }}><inlineCode parentName=\"h2\">{`useStore`}</inlineCode></h2>\n    <p>{`Use observable stores inside React components:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from \"react\"\nimport { createStore } from \"@corets/store\"\nimport { useStore } from \"@corets/use-store\"\n\nconst globalStore = createStore({ count: 0 })\n\nconst Example = () => {\n  const store1 = useStore(() => ({ count: 0 }))\n  const store2 = useStore(globalStore)\n\n  const increment = () => store1.set({ count: store1.get().count + 1 })\n\n  return (\n    <div>\n      <button onClick={increment}>Count: {store1.get().count}</button>\n    </div>\n  )\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}