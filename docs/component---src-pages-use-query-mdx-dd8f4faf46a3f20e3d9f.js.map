{"version":3,"sources":["webpack:///../src/pages/use-query.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"wPAQaA,G,UAAe,S,yMAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,aADR,aAGA,2EAA0D,6BAAGC,WAAW,KAAQ,CAC5E,KAAQ,mDACP,0BAAYA,WAAW,KAAvB,iBAFL,kDAEoH,0BAAYA,WAAW,KAAvB,YAFpH,KAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,iCAIL,iBAAQ,CACN,GAAM,YACL,0BAAYA,WAAW,MAAvB,aACH,8FACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,4tBA0BL,oDAAmC,0BAAYA,WAAW,KAAvB,MAAnC,KAAuF,0BAAYA,WAAW,KAAvB,QAAvF,KAA6I,0BAAYA,WAAW,KAAvB,aAA7I,KAAwM,0BAAYA,WAAW,KAAvB,KAAxM,QAA8P,0BAAYA,WAAW,KAAvB,OAA9P,sOACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,+D,uMAQTJ,EAAWK,gBAAiB","file":"component---src-pages-use-query-mdx-dd8f4faf46a3f20e3d9f.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/mkt/Development/corets/corets/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"use-query\"\n    }}>{`Use Query`}</h1>\n    <p>{`Convenient hooks for url query segments, built for `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactrouter.com/web/guides/quick-start\"\n      }}><inlineCode parentName=\"a\">{`react-router`}</inlineCode></a>{`. Working with queries is now as easy as using `}<inlineCode parentName=\"p\">{`useState`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn add @corets/use-query\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"usequery\"\n    }}><inlineCode parentName=\"h2\">{`useQuery`}</inlineCode></h2>\n    <p>{`Hook into URL query and update it easily from withing your component:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from \"react\"\nimport { useQuery } from \"@corets/use-query\"\n\nconst Example = () => {\n  const [query, setQuery, patchQuery] = useQuery({\n    page: 1,\n    order: \"asc\"\n  })\n\n  // update page and also reset order to the initial value \"asc\"\n  const handleGoToNextPage = () => setQuery({ page: query.page + 1 })\n  // update order, but keep page as is\n  const handleToggleSort = () => patchQuery({ order: query.order === \"asc\" ? \"desc\" : \"asc\" })\n\n  return (\n    <div>\n      <div>Page: {query.page}</div>\n      <div>Order: {query.order}</div>\n      <button onClick={handleGoToNextPage}>Go to next page</button>\n      <button onClick={handleToggleSort}>Change sorting order</button>\n    </div>\n  )\n}\n`}</code></pre>\n    <p>{`By default, parameters like `}<inlineCode parentName=\"p\">{`\"\"`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`null`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`undefined`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`0`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`\"0\"`}</inlineCode>{` are stripped, the default value will be used instead. Updating query with one of those values won't change anything. You can alter this behaviour by providing a second argument, overriding values that should be stripped away:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`useQuery({ some: \"value\" }, [\"\", null, undefined])\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}