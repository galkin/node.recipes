{"version":3,"sources":["webpack:///../src/pages/memo.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"wPAQaA,G,UAAe,S,oMAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,QADR,QAGA,8FACA,uBAAK,gCAAMC,WAAW,OAAU,CAC5B,UAAa,kBADZ,4BAIL,iBAAQ,CACN,GAAM,UACL,0BAAYA,WAAW,MAAvB,YACH,6JAA4I,0BAAYA,WAAW,KAAvB,QAA5I,sCAAmO,0BAAYA,WAAW,KAAvB,aAAnO,KAA8R,0BAAYA,WAAW,KAAvB,WAA9R,QAA0V,0BAAYA,WAAW,KAAvB,eAA1V,sFAAwe,0BAAYA,WAAW,KAAvB,eAAxe,gBAAgjB,0BAAYA,WAAW,KAAvB,QAAhjB,KACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,wrB,kMAiCTJ,EAAWK,gBAAiB","file":"component---src-pages-memo-mdx-9c85321da528f3ffed9c.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/mkt/Development/corets/corets/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"memo\"\n    }}>{`Memo`}</h1>\n    <p>{`React component used to isolate children from unnecessary re-renders.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn add @corets/memo\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"memo-1\"\n    }}><inlineCode parentName=\"h2\">{`<Memo/>`}</inlineCode></h2>\n    <p>{`Memoizes children components to prevent unnecessary re-renders. Children get re-rendered only when one of the fields passed into the `}<inlineCode parentName=\"p\">{`deps`}</inlineCode>{` array change, very similar to how `}<inlineCode parentName=\"p\">{`useEffect`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`useMemo`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`useCallback`}</inlineCode>{` work. You can also display the render count for debugging purposes by setting the `}<inlineCode parentName=\"p\">{`showRenders`}</inlineCode>{` property to `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React, { useState } from \"react\"\nimport { Memo } from \"@corets/memo\"\n\nconst Example = () => {\n  const [a, setA] = useState(0)\n  const [b, setB] = useState(0)\n\n  const incrementFirstValue = () => setA(a + 1)\n  const incrementSecondValue  = () => setB(b + 1)\n\n  return (\n    <div>\n      <div>A: {a}</div>\n      <div>B: {b}</div>\n\n      <Memo deps={[b]} showRenders>\n        <div>Memo: will only re-render when <code>b</code> changes</div>\n        <div>A: {a}</div>\n        <div>B: {b}</div>\n      </Memo>\n\n      <button onClick={incrementFirstValue}>Increment A</button>\n      <button onClick={incrementSecondValue}>Increment B</button>\n    </div>\n  )\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}